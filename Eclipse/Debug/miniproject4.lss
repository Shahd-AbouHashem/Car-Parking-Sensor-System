
project4CarParking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000387c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  0000387c  00003910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008001b0  008001b0  00003a60  2**0
                  ALLOC
  3 .debug_aranges 00000380  00000000  00000000  00003a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005a9  00000000  00000000  00003de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003d6f  00000000  00000000  00004389  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b71  00000000  00000000  000080f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000034ee  00000000  00000000  00009c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004a0  00000000  00000000  0000d158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cdf  00000000  00000000  0000d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000096e  00000000  00000000  0000e2d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000203a0  00000000  00000000  0000ec45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0002efe5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3b       	cpi	r26, 0xBA	; 186
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b9 19 	call	0x3372	; 0x3372 <main>
      8a:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e9       	ldi	r26, 0x9D	; 157
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dd 1b 	jmp	0x37ba	; 0x37ba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cd 1b 	jmp	0x379a	; 0x379a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cd 1b 	jmp	0x379a	; 0x379a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e9       	ldi	r24, 0x9D	; 157
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dd 1b 	jmp	0x37ba	; 0x37ba <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e9       	ldi	r22, 0x9D	; 157
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cd 1b 	jmp	0x379a	; 0x379a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cd 1b 	jmp	0x379a	; 0x379a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cd 1b 	jmp	0x379a	; 0x379a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	eb 55       	subi	r30, 0x5B	; 91
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER1_init>:
 * timer1_t structure.
 *
 * @param timer1 Pointer to the timer1_t structure containing the
 *               configuration settings for timer1.
 */
void TIMER1_init(TIMER1_t *timer1) {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <TIMER1_init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <TIMER1_init+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9a 83       	std	Y+2, r25	; 0x02
     e3c:	89 83       	std	Y+1, r24	; 0x01
  TCCR1Bbits.cs1 = 0; /* Set clock source to stop the timer */
     e3e:	ee e4       	ldi	r30, 0x4E	; 78
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	88 7f       	andi	r24, 0xF8	; 248
     e46:	80 83       	st	Z, r24

  /* Set Mode */
  TCCR1Abits.wgm1_01 = timer1->mode;
     e48:	af e4       	ldi	r26, 0x4F	; 79
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e9 81       	ldd	r30, Y+1	; 0x01
     e4e:	fa 81       	ldd	r31, Y+2	; 0x02
     e50:	80 81       	ld	r24, Z
     e52:	8f 70       	andi	r24, 0x0F	; 15
     e54:	83 70       	andi	r24, 0x03	; 3
     e56:	98 2f       	mov	r25, r24
     e58:	93 70       	andi	r25, 0x03	; 3
     e5a:	8c 91       	ld	r24, X
     e5c:	8c 7f       	andi	r24, 0xFC	; 252
     e5e:	89 2b       	or	r24, r25
     e60:	8c 93       	st	X, r24
  TCCR1Bbits.wgm1_23 = timer1->mode >> 2;
     e62:	ae e4       	ldi	r26, 0x4E	; 78
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e9 81       	ldd	r30, Y+1	; 0x01
     e68:	fa 81       	ldd	r31, Y+2	; 0x02
     e6a:	80 81       	ld	r24, Z
     e6c:	8f 70       	andi	r24, 0x0F	; 15
     e6e:	88 2f       	mov	r24, r24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	95 95       	asr	r25
     e74:	87 95       	ror	r24
     e76:	95 95       	asr	r25
     e78:	87 95       	ror	r24
     e7a:	83 70       	andi	r24, 0x03	; 3
     e7c:	83 70       	andi	r24, 0x03	; 3
     e7e:	98 2f       	mov	r25, r24
     e80:	99 0f       	add	r25, r25
     e82:	99 0f       	add	r25, r25
     e84:	99 0f       	add	r25, r25
     e86:	8c 91       	ld	r24, X
     e88:	87 7e       	andi	r24, 0xE7	; 231
     e8a:	89 2b       	or	r24, r25
     e8c:	8c 93       	st	X, r24

  /* Set Compare Modes */
  TCCR1Abits.com1a = timer1->compareOutputModeA; /* Set compare A output mode */
     e8e:	af e4       	ldi	r26, 0x4F	; 79
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e9 81       	ldd	r30, Y+1	; 0x01
     e94:	fa 81       	ldd	r31, Y+2	; 0x02
     e96:	80 81       	ld	r24, Z
     e98:	82 95       	swap	r24
     e9a:	8f 70       	andi	r24, 0x0F	; 15
     e9c:	83 70       	andi	r24, 0x03	; 3
     e9e:	98 2f       	mov	r25, r24
     ea0:	92 95       	swap	r25
     ea2:	99 0f       	add	r25, r25
     ea4:	99 0f       	add	r25, r25
     ea6:	90 7c       	andi	r25, 0xC0	; 192
     ea8:	8c 91       	ld	r24, X
     eaa:	8f 73       	andi	r24, 0x3F	; 63
     eac:	89 2b       	or	r24, r25
     eae:	8c 93       	st	X, r24
  TCCR1Abits.com1b = timer1->compareOutputModeB; /* Set compare B output mode */
     eb0:	af e4       	ldi	r26, 0x4F	; 79
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e9 81       	ldd	r30, Y+1	; 0x01
     eb6:	fa 81       	ldd	r31, Y+2	; 0x02
     eb8:	80 81       	ld	r24, Z
     eba:	82 95       	swap	r24
     ebc:	86 95       	lsr	r24
     ebe:	86 95       	lsr	r24
     ec0:	83 70       	andi	r24, 0x03	; 3
     ec2:	83 70       	andi	r24, 0x03	; 3
     ec4:	98 2f       	mov	r25, r24
     ec6:	92 95       	swap	r25
     ec8:	90 7f       	andi	r25, 0xF0	; 240
     eca:	8c 91       	ld	r24, X
     ecc:	8f 7c       	andi	r24, 0xCF	; 207
     ece:	89 2b       	or	r24, r25
     ed0:	8c 93       	st	X, r24

  /* Enable needed interrupts */
#ifdef TIMER1_ENABLE_IC_INTERRUPT
  SET_BIT(TIMSK, TICIE1); /* Enable Timer1 input capture interrupt */
     ed2:	a9 e5       	ldi	r26, 0x59	; 89
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e9 e5       	ldi	r30, 0x59	; 89
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 62       	ori	r24, 0x20	; 32
     ede:	8c 93       	st	X, r24
#ifdef TIMER1_ENABLE_CTC_B_INTERRUPT
  SET_BIT(TIMSK, OCIE1B); /* Enable Timer1 CTC B interrupt */
#endif

  /* Configure the output pins if not in normal mode */
  if (timer1->compareOutputModeA != TIMER1_COMPARE_NORMAL) {
     ee0:	e9 81       	ldd	r30, Y+1	; 0x01
     ee2:	fa 81       	ldd	r31, Y+2	; 0x02
     ee4:	80 81       	ld	r24, Z
     ee6:	80 73       	andi	r24, 0x30	; 48
     ee8:	88 23       	and	r24, r24
     eea:	29 f0       	breq	.+10     	; 0xef6 <TIMER1_init+0xc8>
    GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
     eec:	83 e0       	ldi	r24, 0x03	; 3
     eee:	65 e0       	ldi	r22, 0x05	; 5
     ef0:	41 e0       	ldi	r20, 0x01	; 1
     ef2:	0e 94 4f 09 	call	0x129e	; 0x129e <GPIO_setupPinDirection>
  }
  if (timer1->compareOutputModeB != TIMER1_COMPARE_NORMAL) {
     ef6:	e9 81       	ldd	r30, Y+1	; 0x01
     ef8:	fa 81       	ldd	r31, Y+2	; 0x02
     efa:	80 81       	ld	r24, Z
     efc:	80 7c       	andi	r24, 0xC0	; 192
     efe:	88 23       	and	r24, r24
     f00:	29 f0       	breq	.+10     	; 0xf0c <TIMER1_init+0xde>
    GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	64 e0       	ldi	r22, 0x04	; 4
     f06:	41 e0       	ldi	r20, 0x01	; 1
     f08:	0e 94 4f 09 	call	0x129e	; 0x129e <GPIO_setupPinDirection>
  }

  /* Set timer operation mode */
  switch (timer1->mode)
     f0c:	e9 81       	ldd	r30, Y+1	; 0x01
     f0e:	fa 81       	ldd	r31, Y+2	; 0x02
     f10:	80 81       	ld	r24, Z
     f12:	8f 70       	andi	r24, 0x0F	; 15
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	3c 83       	std	Y+4, r19	; 0x04
     f1a:	2b 83       	std	Y+3, r18	; 0x03
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	9c 81       	ldd	r25, Y+4	; 0x04
     f20:	84 30       	cpi	r24, 0x04	; 4
     f22:	91 05       	cpc	r25, r1
     f24:	49 f0       	breq	.+18     	; 0xf38 <TIMER1_init+0x10a>
     f26:	2b 81       	ldd	r18, Y+3	; 0x03
     f28:	3c 81       	ldd	r19, Y+4	; 0x04
     f2a:	2c 30       	cpi	r18, 0x0C	; 12
     f2c:	31 05       	cpc	r19, r1
     f2e:	21 f0       	breq	.+8      	; 0xf38 <TIMER1_init+0x10a>
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	59 f4       	brne	.+22     	; 0xf4e <TIMER1_init+0x120>
    {
    case TIMER1_MODE_NORMAL:
    case TIMER1_MODE_CTC_ICR1:
    case TIMER1_MODE_CTC_OCR1A:
      TCCR1Abits.foc1a = 1; /* Set FOC1A for normal mode OR CTC mode */
     f38:	ef e4       	ldi	r30, 0x4F	; 79
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	88 60       	ori	r24, 0x08	; 8
     f40:	80 83       	st	Z, r24
      TCCR1Abits.foc1b = 1; /* Set FOC1B for normal mode OR CTC mode */
     f42:	ef e4       	ldi	r30, 0x4F	; 79
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	84 60       	ori	r24, 0x04	; 4
     f4a:	80 83       	st	Z, r24
     f4c:	0a c0       	rjmp	.+20     	; 0xf62 <TIMER1_init+0x134>
      break;
    default:
      TCCR1Abits.foc1a = 0; /* Clear FOC1A for any PWM mode */
     f4e:	ef e4       	ldi	r30, 0x4F	; 79
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	87 7f       	andi	r24, 0xF7	; 247
     f56:	80 83       	st	Z, r24
      TCCR1Abits.foc1b = 0; /* Clear FOC1B for any PWM mode */
     f58:	ef e4       	ldi	r30, 0x4F	; 79
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8b 7f       	andi	r24, 0xFB	; 251
     f60:	80 83       	st	Z, r24
      break;
    }

  /* Set input capture settings */
  TIMER1_IC_NoiseCancelr_Control(timer1->inputCaptureNoise); /* Noise Canceler enable/disable */
     f62:	ae e4       	ldi	r26, 0x4E	; 78
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e9 81       	ldd	r30, Y+1	; 0x01
     f68:	fa 81       	ldd	r31, Y+2	; 0x02
     f6a:	81 81       	ldd	r24, Z+1	; 0x01
     f6c:	86 95       	lsr	r24
     f6e:	86 95       	lsr	r24
     f70:	86 95       	lsr	r24
     f72:	81 70       	andi	r24, 0x01	; 1
     f74:	98 2f       	mov	r25, r24
     f76:	97 95       	ror	r25
     f78:	99 27       	eor	r25, r25
     f7a:	97 95       	ror	r25
     f7c:	8c 91       	ld	r24, X
     f7e:	8f 77       	andi	r24, 0x7F	; 127
     f80:	89 2b       	or	r24, r25
     f82:	8c 93       	st	X, r24
  TIMER1_IC_EdgeSelect(timer1->inputCaptureEdge); /* Clock Edge select to trigger interrupt*/
     f84:	ae e4       	ldi	r26, 0x4E	; 78
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e9 81       	ldd	r30, Y+1	; 0x01
     f8a:	fa 81       	ldd	r31, Y+2	; 0x02
     f8c:	81 81       	ldd	r24, Z+1	; 0x01
     f8e:	82 95       	swap	r24
     f90:	8f 70       	andi	r24, 0x0F	; 15
     f92:	81 70       	andi	r24, 0x01	; 1
     f94:	81 70       	andi	r24, 0x01	; 1
     f96:	98 2f       	mov	r25, r24
     f98:	92 95       	swap	r25
     f9a:	99 0f       	add	r25, r25
     f9c:	99 0f       	add	r25, r25
     f9e:	90 7c       	andi	r25, 0xC0	; 192
     fa0:	8c 91       	ld	r24, X
     fa2:	8f 7b       	andi	r24, 0xBF	; 191
     fa4:	89 2b       	or	r24, r25
     fa6:	8c 93       	st	X, r24

  /* Set clock pre-scaler */
  TCCR1Bbits.cs1 = timer1->clockPre;
     fa8:	ae e4       	ldi	r26, 0x4E	; 78
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e9 81       	ldd	r30, Y+1	; 0x01
     fae:	fa 81       	ldd	r31, Y+2	; 0x02
     fb0:	81 81       	ldd	r24, Z+1	; 0x01
     fb2:	87 70       	andi	r24, 0x07	; 7
     fb4:	98 2f       	mov	r25, r24
     fb6:	97 70       	andi	r25, 0x07	; 7
     fb8:	8c 91       	ld	r24, X
     fba:	88 7f       	andi	r24, 0xF8	; 248
     fbc:	89 2b       	or	r24, r25
     fbe:	8c 93       	st	X, r24
}
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <TIMER1_deInit>:
/**
 * @brief De-initializes timer1 and stops its operation.
 *
 * This function resets timer1 and disables its operation.
 */
void TIMER1_deInit(void) {
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
  TCCR1A = 0;
     fd6:	ef e4       	ldi	r30, 0x4F	; 79
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	10 82       	st	Z, r1
  TCCR1B = 0;
     fdc:	ee e4       	ldi	r30, 0x4E	; 78
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	10 82       	st	Z, r1
  TIMSK &= 0b11000011;
     fe2:	a9 e5       	ldi	r26, 0x59	; 89
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e9 e5       	ldi	r30, 0x59	; 89
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	83 7c       	andi	r24, 0xC3	; 195
     fee:	8c 93       	st	X, r24
}
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <TIMER1_setDutyCycle_A>:

/** @brief Set the duty cycle for PWM TIMER1A.
 *
 * @param dutyCycle The desired duty cycle percentage (0-100).
 */
void TIMER1_setDutyCycle_A(uint8 dutyCycle) {
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	0f 92       	push	r0
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	89 83       	std	Y+1, r24	; 0x01
  TIMER1_setTopValue(g_timer1.mode);
    100e:	80 91 a5 01 	lds	r24, 0x01A5
    1012:	8f 70       	andi	r24, 0x0F	; 15
    1014:	0e 94 3a 08 	call	0x1074	; 0x1074 <TIMER1_setTopValue>
  OCR1A = (uint16) ((uint32) dutyCycle * TIMER1_TOP / 100);
    1018:	0f 2e       	mov	r0, r31
    101a:	fa e4       	ldi	r31, 0x4A	; 74
    101c:	cf 2e       	mov	r12, r31
    101e:	dd 24       	eor	r13, r13
    1020:	f0 2d       	mov	r31, r0
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	e8 2e       	mov	r14, r24
    1026:	ff 24       	eor	r15, r15
    1028:	00 e0       	ldi	r16, 0x00	; 0
    102a:	10 e0       	ldi	r17, 0x00	; 0
    102c:	80 91 b0 01 	lds	r24, 0x01B0
    1030:	90 91 b1 01 	lds	r25, 0x01B1
    1034:	9c 01       	movw	r18, r24
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	c8 01       	movw	r24, r16
    103c:	b7 01       	movw	r22, r14
    103e:	0e 94 80 1b 	call	0x3700	; 0x3700 <__mulsi3>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	24 e6       	ldi	r18, 0x64	; 100
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	bc 01       	movw	r22, r24
    1050:	cd 01       	movw	r24, r26
    1052:	0e 94 9f 1b 	call	0x373e	; 0x373e <__udivmodsi4>
    1056:	da 01       	movw	r26, r20
    1058:	c9 01       	movw	r24, r18
    105a:	f6 01       	movw	r30, r12
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	80 83       	st	Z, r24
}
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	df 90       	pop	r13
    1070:	cf 90       	pop	r12
    1072:	08 95       	ret

00001074 <TIMER1_setTopValue>:
#endif

/*******************************************************************************
 *                              Static Functions                               *
 *******************************************************************************/
static inline void TIMER1_setTopValue(uint8 mode) {
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <TIMER1_setTopValue+0x6>
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	89 83       	std	Y+1, r24	; 0x01
  /* Set TOP value */
  switch (mode)
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	3b 83       	std	Y+3, r19	; 0x03
    108a:	2a 83       	std	Y+2, r18	; 0x02
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	9b 81       	ldd	r25, Y+3	; 0x03
    1090:	87 30       	cpi	r24, 0x07	; 7
    1092:	91 05       	cpc	r25, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <TIMER1_setTopValue+0x24>
    1096:	61 c0       	rjmp	.+194    	; 0x115a <TIMER1_setTopValue+0xe6>
    1098:	2a 81       	ldd	r18, Y+2	; 0x02
    109a:	3b 81       	ldd	r19, Y+3	; 0x03
    109c:	28 30       	cpi	r18, 0x08	; 8
    109e:	31 05       	cpc	r19, r1
    10a0:	3c f5       	brge	.+78     	; 0x10f0 <TIMER1_setTopValue+0x7c>
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	9b 81       	ldd	r25, Y+3	; 0x03
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <TIMER1_setTopValue+0x3a>
    10ac:	56 c0       	rjmp	.+172    	; 0x115a <TIMER1_setTopValue+0xe6>
    10ae:	2a 81       	ldd	r18, Y+2	; 0x02
    10b0:	3b 81       	ldd	r19, Y+3	; 0x03
    10b2:	24 30       	cpi	r18, 0x04	; 4
    10b4:	31 05       	cpc	r19, r1
    10b6:	8c f4       	brge	.+34     	; 0x10da <TIMER1_setTopValue+0x66>
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	9b 81       	ldd	r25, Y+3	; 0x03
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <TIMER1_setTopValue+0x50>
    10c2:	3d c0       	rjmp	.+122    	; 0x113e <TIMER1_setTopValue+0xca>
    10c4:	2a 81       	ldd	r18, Y+2	; 0x02
    10c6:	3b 81       	ldd	r19, Y+3	; 0x03
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	0c f0       	brlt	.+2      	; 0x10d0 <TIMER1_setTopValue+0x5c>
    10ce:	3e c0       	rjmp	.+124    	; 0x114c <TIMER1_setTopValue+0xd8>
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	9b 81       	ldd	r25, Y+3	; 0x03
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	61 f1       	breq	.+88     	; 0x1130 <TIMER1_setTopValue+0xbc>
    10d8:	58 c0       	rjmp	.+176    	; 0x118a <TIMER1_setTopValue+0x116>
    10da:	2a 81       	ldd	r18, Y+2	; 0x02
    10dc:	3b 81       	ldd	r19, Y+3	; 0x03
    10de:	25 30       	cpi	r18, 0x05	; 5
    10e0:	31 05       	cpc	r19, r1
    10e2:	69 f1       	breq	.+90     	; 0x113e <TIMER1_setTopValue+0xca>
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	9b 81       	ldd	r25, Y+3	; 0x03
    10e8:	86 30       	cpi	r24, 0x06	; 6
    10ea:	91 05       	cpc	r25, r1
    10ec:	7c f5       	brge	.+94     	; 0x114c <TIMER1_setTopValue+0xd8>
    10ee:	3c c0       	rjmp	.+120    	; 0x1168 <TIMER1_setTopValue+0xf4>
    10f0:	2a 81       	ldd	r18, Y+2	; 0x02
    10f2:	3b 81       	ldd	r19, Y+3	; 0x03
    10f4:	2b 30       	cpi	r18, 0x0B	; 11
    10f6:	31 05       	cpc	r19, r1
    10f8:	b9 f1       	breq	.+110    	; 0x1168 <TIMER1_setTopValue+0xf4>
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	9b 81       	ldd	r25, Y+3	; 0x03
    10fe:	8c 30       	cpi	r24, 0x0C	; 12
    1100:	91 05       	cpc	r25, r1
    1102:	34 f4       	brge	.+12     	; 0x1110 <TIMER1_setTopValue+0x9c>
    1104:	2a 81       	ldd	r18, Y+2	; 0x02
    1106:	3b 81       	ldd	r19, Y+3	; 0x03
    1108:	29 30       	cpi	r18, 0x09	; 9
    110a:	31 05       	cpc	r19, r1
    110c:	69 f1       	breq	.+90     	; 0x1168 <TIMER1_setTopValue+0xf4>
    110e:	35 c0       	rjmp	.+106    	; 0x117a <TIMER1_setTopValue+0x106>
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	9b 81       	ldd	r25, Y+3	; 0x03
    1114:	8e 30       	cpi	r24, 0x0E	; 14
    1116:	91 05       	cpc	r25, r1
    1118:	81 f1       	breq	.+96     	; 0x117a <TIMER1_setTopValue+0x106>
    111a:	2a 81       	ldd	r18, Y+2	; 0x02
    111c:	3b 81       	ldd	r19, Y+3	; 0x03
    111e:	2f 30       	cpi	r18, 0x0F	; 15
    1120:	31 05       	cpc	r19, r1
    1122:	11 f1       	breq	.+68     	; 0x1168 <TIMER1_setTopValue+0xf4>
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	9b 81       	ldd	r25, Y+3	; 0x03
    1128:	8c 30       	cpi	r24, 0x0C	; 12
    112a:	91 05       	cpc	r25, r1
    112c:	31 f1       	breq	.+76     	; 0x117a <TIMER1_setTopValue+0x106>
    112e:	2d c0       	rjmp	.+90     	; 0x118a <TIMER1_setTopValue+0x116>
    {
    case TIMER1_MODE_NORMAL:
      TIMER1_TOP = 0XFFFF;
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	9f ef       	ldi	r25, 0xFF	; 255
    1134:	90 93 b1 01 	sts	0x01B1, r25
    1138:	80 93 b0 01 	sts	0x01B0, r24
    113c:	26 c0       	rjmp	.+76     	; 0x118a <TIMER1_setTopValue+0x116>
      break;
    case TIMER1_MODE_PWM_PC_8BIT:
    case TIMER1_MODE_PWM_FAST_8BIT:
      TIMER1_TOP = 0X00FF;
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	90 93 b1 01 	sts	0x01B1, r25
    1146:	80 93 b0 01 	sts	0x01B0, r24
    114a:	1f c0       	rjmp	.+62     	; 0x118a <TIMER1_setTopValue+0x116>
      break;
    case TIMER1_MODE_PWM_PC_9BIT:
    case TIMER1_MODE_PWM_FAST_9BIT:
      TIMER1_TOP = 0X01FF;
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	90 93 b1 01 	sts	0x01B1, r25
    1154:	80 93 b0 01 	sts	0x01B0, r24
    1158:	18 c0       	rjmp	.+48     	; 0x118a <TIMER1_setTopValue+0x116>
      break;
    case TIMER1_MODE_PWM_PC_10BIT:
    case TIMER1_MODE_PWM_FAST_10BIT:
      TIMER1_TOP = 0X03FF;
    115a:	8f ef       	ldi	r24, 0xFF	; 255
    115c:	93 e0       	ldi	r25, 0x03	; 3
    115e:	90 93 b1 01 	sts	0x01B1, r25
    1162:	80 93 b0 01 	sts	0x01B0, r24
    1166:	11 c0       	rjmp	.+34     	; 0x118a <TIMER1_setTopValue+0x116>
      break;
    case TIMER1_MODE_CTC_OCR1A:
    case TIMER1_MODE_PWM_PC_FC_OCR1A:
    case TIMER1_MODE_PWM_PC_OCR1A:
    case TIMER1_MODE_PWM_FAST_OCR1A:
      TIMER1_TOP = OCR1A;
    1168:	ea e4       	ldi	r30, 0x4A	; 74
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	91 81       	ldd	r25, Z+1	; 0x01
    1170:	90 93 b1 01 	sts	0x01B1, r25
    1174:	80 93 b0 01 	sts	0x01B0, r24
    1178:	08 c0       	rjmp	.+16     	; 0x118a <TIMER1_setTopValue+0x116>
      break;
    case TIMER1_MODE_CTC_ICR1:
    case TIMER1_MODE_PWM_PC_FC_ICR1:
    case TIMER1_MODE_PWM_PC_ICR1:
    case TIMER1_MODE_PWM_FAST_ICR1:
      TIMER1_TOP = ICR1;
    117a:	e6 e4       	ldi	r30, 0x46	; 70
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	91 81       	ldd	r25, Z+1	; 0x01
    1182:	90 93 b1 01 	sts	0x01B1, r25
    1186:	80 93 b0 01 	sts	0x01B0, r24
      break;

    }
}
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <TIMER1_setDutyCycle_B>:

/** @brief Set the duty cycle for PWM TIMER1B.
 *
 * @param dutyCycle The desired duty cycle percentage (0-100).
 */
void TIMER1_setDutyCycle_B(uint8 dutyCycle) {
    1196:	cf 92       	push	r12
    1198:	df 92       	push	r13
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	89 83       	std	Y+1, r24	; 0x01
  TIMER1_setTopValue(g_timer1.mode);
    11ae:	80 91 a5 01 	lds	r24, 0x01A5
    11b2:	8f 70       	andi	r24, 0x0F	; 15
    11b4:	0e 94 3a 08 	call	0x1074	; 0x1074 <TIMER1_setTopValue>
  OCR1B = (uint16) ((uint32) dutyCycle * TIMER1_TOP / 100);
    11b8:	0f 2e       	mov	r0, r31
    11ba:	f8 e4       	ldi	r31, 0x48	; 72
    11bc:	cf 2e       	mov	r12, r31
    11be:	dd 24       	eor	r13, r13
    11c0:	f0 2d       	mov	r31, r0
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	e8 2e       	mov	r14, r24
    11c6:	ff 24       	eor	r15, r15
    11c8:	00 e0       	ldi	r16, 0x00	; 0
    11ca:	10 e0       	ldi	r17, 0x00	; 0
    11cc:	80 91 b0 01 	lds	r24, 0x01B0
    11d0:	90 91 b1 01 	lds	r25, 0x01B1
    11d4:	9c 01       	movw	r18, r24
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	c8 01       	movw	r24, r16
    11dc:	b7 01       	movw	r22, r14
    11de:	0e 94 80 1b 	call	0x3700	; 0x3700 <__mulsi3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	24 e6       	ldi	r18, 0x64	; 100
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	bc 01       	movw	r22, r24
    11f0:	cd 01       	movw	r24, r26
    11f2:	0e 94 9f 1b 	call	0x373e	; 0x373e <__udivmodsi4>
    11f6:	da 01       	movw	r26, r20
    11f8:	c9 01       	movw	r24, r18
    11fa:	f6 01       	movw	r30, r12
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	80 83       	st	Z, r24
}
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	df 90       	pop	r13
    1210:	cf 90       	pop	r12
    1212:	08 95       	ret

00001214 <TIMER1_set_IC_InterruptHandler>:
 * @brief Sets the Input Capture interrupt handler for timer1.
 *
 * @param overFlowInterruptHandler Pointer to the function to be called on
 *                                  timer1 Input Capture interrupt.
 */
void TIMER1_set_IC_InterruptHandler(void (*inputCaptureInterruptHandler)(void)) {
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <TIMER1_set_IC_InterruptHandler+0x6>
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	89 83       	std	Y+1, r24	; 0x01
  TIMER1_inputCaptureInterruptHandler = inputCaptureInterruptHandler;
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	90 93 b3 01 	sts	0x01B3, r25
    122a:	80 93 b2 01 	sts	0x01B2, r24
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <__vector_6>:
 *                                 ISR Functions                               *
 *******************************************************************************/

#ifdef TIMER1_ENABLE_IC_INTERRUPT
/** @brief ISR for Timer1 Input Capture interrupt. */
ISR(TIMER1_CAPT_vect) {
    1238:	1f 92       	push	r1
    123a:	0f 92       	push	r0
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	0f 92       	push	r0
    1240:	11 24       	eor	r1, r1
    1242:	2f 93       	push	r18
    1244:	3f 93       	push	r19
    1246:	4f 93       	push	r20
    1248:	5f 93       	push	r21
    124a:	6f 93       	push	r22
    124c:	7f 93       	push	r23
    124e:	8f 93       	push	r24
    1250:	9f 93       	push	r25
    1252:	af 93       	push	r26
    1254:	bf 93       	push	r27
    1256:	ef 93       	push	r30
    1258:	ff 93       	push	r31
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
  if (NULL_PTR != TIMER1_inputCaptureInterruptHandler)
    1262:	80 91 b2 01 	lds	r24, 0x01B2
    1266:	90 91 b3 01 	lds	r25, 0x01B3
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	29 f0       	breq	.+10     	; 0x1278 <__vector_6+0x40>
    TIMER1_inputCaptureInterruptHandler(); /* Call the input capture handler if set */
    126e:	e0 91 b2 01 	lds	r30, 0x01B2
    1272:	f0 91 b3 01 	lds	r31, 0x01B3
    1276:	09 95       	icall
}
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	ff 91       	pop	r31
    127e:	ef 91       	pop	r30
    1280:	bf 91       	pop	r27
    1282:	af 91       	pop	r26
    1284:	9f 91       	pop	r25
    1286:	8f 91       	pop	r24
    1288:	7f 91       	pop	r23
    128a:	6f 91       	pop	r22
    128c:	5f 91       	pop	r21
    128e:	4f 91       	pop	r20
    1290:	3f 91       	pop	r19
    1292:	2f 91       	pop	r18
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0f 90       	pop	r0
    129a:	1f 90       	pop	r1
    129c:	18 95       	reti

0000129e <GPIO_setupPinDirection>:
 * @param port_num Port number (0 to NUM_OF_PORTS-1)
 * @param pin_num Pin number (0 to NUM_OF_PINS_PER_PORT-1)
 * @param direction Direction of the pin (PIN_INPUT or PIN_OUTPUT)
 */
void GPIO_setupPinDirection (uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <GPIO_setupPinDirection+0x6>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <GPIO_setupPinDirection+0x8>
    12a6:	0f 92       	push	r0
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	6a 83       	std	Y+2, r22	; 0x02
    12b0:	4b 83       	std	Y+3, r20	; 0x03
  /* Check if the input port or pin number is invalid */
  if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	88 30       	cpi	r24, 0x08	; 8
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <GPIO_setupPinDirection+0x1c>
    12b8:	d5 c0       	rjmp	.+426    	; 0x1464 <GPIO_setupPinDirection+0x1c6>
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	84 30       	cpi	r24, 0x04	; 4
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <GPIO_setupPinDirection+0x24>
    12c0:	d1 c0       	rjmp	.+418    	; 0x1464 <GPIO_setupPinDirection+0x1c6>
      /* Do Nothing */
    }
  else
    {
      /* Setup the pin direction as required */
      switch (port_num)
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	3d 83       	std	Y+5, r19	; 0x05
    12ca:	2c 83       	std	Y+4, r18	; 0x04
    12cc:	8c 81       	ldd	r24, Y+4	; 0x04
    12ce:	9d 81       	ldd	r25, Y+5	; 0x05
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	91 05       	cpc	r25, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <GPIO_setupPinDirection+0x3a>
    12d6:	43 c0       	rjmp	.+134    	; 0x135e <GPIO_setupPinDirection+0xc0>
    12d8:	2c 81       	ldd	r18, Y+4	; 0x04
    12da:	3d 81       	ldd	r19, Y+5	; 0x05
    12dc:	22 30       	cpi	r18, 0x02	; 2
    12de:	31 05       	cpc	r19, r1
    12e0:	2c f4       	brge	.+10     	; 0x12ec <GPIO_setupPinDirection+0x4e>
    12e2:	8c 81       	ldd	r24, Y+4	; 0x04
    12e4:	9d 81       	ldd	r25, Y+5	; 0x05
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	71 f0       	breq	.+28     	; 0x1306 <GPIO_setupPinDirection+0x68>
    12ea:	bc c0       	rjmp	.+376    	; 0x1464 <GPIO_setupPinDirection+0x1c6>
    12ec:	2c 81       	ldd	r18, Y+4	; 0x04
    12ee:	3d 81       	ldd	r19, Y+5	; 0x05
    12f0:	22 30       	cpi	r18, 0x02	; 2
    12f2:	31 05       	cpc	r19, r1
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <GPIO_setupPinDirection+0x5a>
    12f6:	5f c0       	rjmp	.+190    	; 0x13b6 <GPIO_setupPinDirection+0x118>
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	9d 81       	ldd	r25, Y+5	; 0x05
    12fc:	83 30       	cpi	r24, 0x03	; 3
    12fe:	91 05       	cpc	r25, r1
    1300:	09 f4       	brne	.+2      	; 0x1304 <GPIO_setupPinDirection+0x66>
    1302:	85 c0       	rjmp	.+266    	; 0x140e <GPIO_setupPinDirection+0x170>
    1304:	af c0       	rjmp	.+350    	; 0x1464 <GPIO_setupPinDirection+0x1c6>
	{
	case PORTA_ID:
	  if (direction == PIN_OUTPUT)
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	a1 f4       	brne	.+40     	; 0x1334 <GPIO_setupPinDirection+0x96>
	    {
	      SET_BIT(DDRA, pin_num);
    130c:	aa e3       	ldi	r26, 0x3A	; 58
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	ea e3       	ldi	r30, 0x3A	; 58
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <GPIO_setupPinDirection+0x8c>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <GPIO_setupPinDirection+0x88>
    132e:	84 2b       	or	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	98 c0       	rjmp	.+304    	; 0x1464 <GPIO_setupPinDirection+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(DDRA, pin_num);
    1334:	aa e3       	ldi	r26, 0x3A	; 58
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	ea e3       	ldi	r30, 0x3A	; 58
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <GPIO_setupPinDirection+0xb4>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <GPIO_setupPinDirection+0xb0>
    1356:	80 95       	com	r24
    1358:	84 23       	and	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	83 c0       	rjmp	.+262    	; 0x1464 <GPIO_setupPinDirection+0x1c6>
	    }
	  break;
	case PORTB_ID:
	  if (direction == PIN_OUTPUT)
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	a1 f4       	brne	.+40     	; 0x138c <GPIO_setupPinDirection+0xee>
	    {
	      SET_BIT(DDRB, pin_num);
    1364:	a7 e3       	ldi	r26, 0x37	; 55
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e7 e3       	ldi	r30, 0x37	; 55
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <GPIO_setupPinDirection+0xe4>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <GPIO_setupPinDirection+0xe0>
    1386:	84 2b       	or	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	6c c0       	rjmp	.+216    	; 0x1464 <GPIO_setupPinDirection+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(DDRB, pin_num);
    138c:	a7 e3       	ldi	r26, 0x37	; 55
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e7 e3       	ldi	r30, 0x37	; 55
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 2e       	mov	r0, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <GPIO_setupPinDirection+0x10c>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <GPIO_setupPinDirection+0x108>
    13ae:	80 95       	com	r24
    13b0:	84 23       	and	r24, r20
    13b2:	8c 93       	st	X, r24
    13b4:	57 c0       	rjmp	.+174    	; 0x1464 <GPIO_setupPinDirection+0x1c6>
	    }
	  break;
	case PORTC_ID:
	  if (direction == PIN_OUTPUT)
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	a1 f4       	brne	.+40     	; 0x13e4 <GPIO_setupPinDirection+0x146>
	    {
	      SET_BIT(DDRC, pin_num);
    13bc:	a4 e3       	ldi	r26, 0x34	; 52
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e4 e3       	ldi	r30, 0x34	; 52
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <GPIO_setupPinDirection+0x13c>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <GPIO_setupPinDirection+0x138>
    13de:	84 2b       	or	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	40 c0       	rjmp	.+128    	; 0x1464 <GPIO_setupPinDirection+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(DDRC, pin_num);
    13e4:	a4 e3       	ldi	r26, 0x34	; 52
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e4 e3       	ldi	r30, 0x34	; 52
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <GPIO_setupPinDirection+0x164>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <GPIO_setupPinDirection+0x160>
    1406:	80 95       	com	r24
    1408:	84 23       	and	r24, r20
    140a:	8c 93       	st	X, r24
    140c:	2b c0       	rjmp	.+86     	; 0x1464 <GPIO_setupPinDirection+0x1c6>
	    }
	  break;
	case PORTD_ID:
	  if (direction == PIN_OUTPUT)
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	a1 f4       	brne	.+40     	; 0x143c <GPIO_setupPinDirection+0x19e>
	    {
	      SET_BIT(DDRD, pin_num);
    1414:	a1 e3       	ldi	r26, 0x31	; 49
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e1 e3       	ldi	r30, 0x31	; 49
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <GPIO_setupPinDirection+0x194>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <GPIO_setupPinDirection+0x190>
    1436:	84 2b       	or	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	14 c0       	rjmp	.+40     	; 0x1464 <GPIO_setupPinDirection+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(DDRD, pin_num);
    143c:	a1 e3       	ldi	r26, 0x31	; 49
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e1 e3       	ldi	r30, 0x31	; 49
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <GPIO_setupPinDirection+0x1bc>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <GPIO_setupPinDirection+0x1b8>
    145e:	80 95       	com	r24
    1460:	84 23       	and	r24, r20
    1462:	8c 93       	st	X, r24
	    }
	  break;
	}
    }
}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <GPIO_writePin>:
 * @param port_num Port number (0 to NUM_OF_PORTS-1)
 * @param pin_num Pin number (0 to NUM_OF_PINS_PER_PORT-1)
 * @param value Value to write (LOGIC_HIGH or LOGIC_LOW)
 */
void GPIO_writePin (uint8 port_num, uint8 pin_num, uint8 value)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	00 d0       	rcall	.+0      	; 0x147a <GPIO_writePin+0x6>
    147a:	00 d0       	rcall	.+0      	; 0x147c <GPIO_writePin+0x8>
    147c:	0f 92       	push	r0
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	6a 83       	std	Y+2, r22	; 0x02
    1486:	4b 83       	std	Y+3, r20	; 0x03
  /* Check if the input port or pin number is invalid */
  if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	88 30       	cpi	r24, 0x08	; 8
    148c:	08 f0       	brcs	.+2      	; 0x1490 <GPIO_writePin+0x1c>
    148e:	d5 c0       	rjmp	.+426    	; 0x163a <GPIO_writePin+0x1c6>
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	84 30       	cpi	r24, 0x04	; 4
    1494:	08 f0       	brcs	.+2      	; 0x1498 <GPIO_writePin+0x24>
    1496:	d1 c0       	rjmp	.+418    	; 0x163a <GPIO_writePin+0x1c6>
      /* Do Nothing */
    }
  else
    {
      /* Write the pin value as required */
      switch (port_num)
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	3d 83       	std	Y+5, r19	; 0x05
    14a0:	2c 83       	std	Y+4, r18	; 0x04
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	9d 81       	ldd	r25, Y+5	; 0x05
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	91 05       	cpc	r25, r1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <GPIO_writePin+0x3a>
    14ac:	43 c0       	rjmp	.+134    	; 0x1534 <GPIO_writePin+0xc0>
    14ae:	2c 81       	ldd	r18, Y+4	; 0x04
    14b0:	3d 81       	ldd	r19, Y+5	; 0x05
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <GPIO_writePin+0x4e>
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	71 f0       	breq	.+28     	; 0x14dc <GPIO_writePin+0x68>
    14c0:	bc c0       	rjmp	.+376    	; 0x163a <GPIO_writePin+0x1c6>
    14c2:	2c 81       	ldd	r18, Y+4	; 0x04
    14c4:	3d 81       	ldd	r19, Y+5	; 0x05
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	09 f4       	brne	.+2      	; 0x14ce <GPIO_writePin+0x5a>
    14cc:	5f c0       	rjmp	.+190    	; 0x158c <GPIO_writePin+0x118>
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	9d 81       	ldd	r25, Y+5	; 0x05
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	91 05       	cpc	r25, r1
    14d6:	09 f4       	brne	.+2      	; 0x14da <GPIO_writePin+0x66>
    14d8:	85 c0       	rjmp	.+266    	; 0x15e4 <GPIO_writePin+0x170>
    14da:	af c0       	rjmp	.+350    	; 0x163a <GPIO_writePin+0x1c6>
	{
	case PORTA_ID:
	  if (value == LOGIC_HIGH)
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	a1 f4       	brne	.+40     	; 0x150a <GPIO_writePin+0x96>
	    {
	      SET_BIT(PORTA, pin_num);
    14e2:	ab e3       	ldi	r26, 0x3B	; 59
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	eb e3       	ldi	r30, 0x3B	; 59
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	02 2e       	mov	r0, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <GPIO_writePin+0x8c>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	0a 94       	dec	r0
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <GPIO_writePin+0x88>
    1504:	84 2b       	or	r24, r20
    1506:	8c 93       	st	X, r24
    1508:	98 c0       	rjmp	.+304    	; 0x163a <GPIO_writePin+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(PORTA, pin_num);
    150a:	ab e3       	ldi	r26, 0x3B	; 59
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	eb e3       	ldi	r30, 0x3B	; 59
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	48 2f       	mov	r20, r24
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 2e       	mov	r0, r18
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <GPIO_writePin+0xb4>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	0a 94       	dec	r0
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <GPIO_writePin+0xb0>
    152c:	80 95       	com	r24
    152e:	84 23       	and	r24, r20
    1530:	8c 93       	st	X, r24
    1532:	83 c0       	rjmp	.+262    	; 0x163a <GPIO_writePin+0x1c6>
	    }
	  break;
	case PORTB_ID:
	  if (value == LOGIC_HIGH)
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	a1 f4       	brne	.+40     	; 0x1562 <GPIO_writePin+0xee>
	    {
	      SET_BIT(PORTB, pin_num);
    153a:	a8 e3       	ldi	r26, 0x38	; 56
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e8 e3       	ldi	r30, 0x38	; 56
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <GPIO_writePin+0xe4>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <GPIO_writePin+0xe0>
    155c:	84 2b       	or	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	6c c0       	rjmp	.+216    	; 0x163a <GPIO_writePin+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(PORTB, pin_num);
    1562:	a8 e3       	ldi	r26, 0x38	; 56
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e8 e3       	ldi	r30, 0x38	; 56
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <GPIO_writePin+0x10c>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <GPIO_writePin+0x108>
    1584:	80 95       	com	r24
    1586:	84 23       	and	r24, r20
    1588:	8c 93       	st	X, r24
    158a:	57 c0       	rjmp	.+174    	; 0x163a <GPIO_writePin+0x1c6>
	    }
	  break;
	case PORTC_ID:
	  if (value == LOGIC_HIGH)
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	a1 f4       	brne	.+40     	; 0x15ba <GPIO_writePin+0x146>
	    {
	      SET_BIT(PORTC, pin_num);
    1592:	a5 e3       	ldi	r26, 0x35	; 53
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e5 e3       	ldi	r30, 0x35	; 53
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 2e       	mov	r0, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <GPIO_writePin+0x13c>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	0a 94       	dec	r0
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <GPIO_writePin+0x138>
    15b4:	84 2b       	or	r24, r20
    15b6:	8c 93       	st	X, r24
    15b8:	40 c0       	rjmp	.+128    	; 0x163a <GPIO_writePin+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(PORTC, pin_num);
    15ba:	a5 e3       	ldi	r26, 0x35	; 53
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e5 e3       	ldi	r30, 0x35	; 53
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	48 2f       	mov	r20, r24
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 2e       	mov	r0, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <GPIO_writePin+0x164>
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	0a 94       	dec	r0
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <GPIO_writePin+0x160>
    15dc:	80 95       	com	r24
    15de:	84 23       	and	r24, r20
    15e0:	8c 93       	st	X, r24
    15e2:	2b c0       	rjmp	.+86     	; 0x163a <GPIO_writePin+0x1c6>
	    }
	  break;
	case PORTD_ID:
	  if (value == LOGIC_HIGH)
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	a1 f4       	brne	.+40     	; 0x1612 <GPIO_writePin+0x19e>
	    {
	      SET_BIT(PORTD, pin_num);
    15ea:	a2 e3       	ldi	r26, 0x32	; 50
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e2 e3       	ldi	r30, 0x32	; 50
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	48 2f       	mov	r20, r24
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 2e       	mov	r0, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <GPIO_writePin+0x194>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	0a 94       	dec	r0
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <GPIO_writePin+0x190>
    160c:	84 2b       	or	r24, r20
    160e:	8c 93       	st	X, r24
    1610:	14 c0       	rjmp	.+40     	; 0x163a <GPIO_writePin+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(PORTD, pin_num);
    1612:	a2 e3       	ldi	r26, 0x32	; 50
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e2 e3       	ldi	r30, 0x32	; 50
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 2e       	mov	r0, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <GPIO_writePin+0x1bc>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	0a 94       	dec	r0
    1632:	e2 f7       	brpl	.-8      	; 0x162c <GPIO_writePin+0x1b8>
    1634:	80 95       	com	r24
    1636:	84 23       	and	r24, r20
    1638:	8c 93       	st	X, r24
	    }
	  break;
	}
    }
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <GPIO_togglePin>:
 *
 * @param port_num Port number (0 to NUM_OF_PORTS-1).
 * @param pin_num Pin number (0 to NUM_OF_PINS_PER_PORT-1).
 */
void GPIO_togglePin (uint8 port_num, uint8 pin_num)
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	00 d0       	rcall	.+0      	; 0x1650 <GPIO_togglePin+0x6>
    1650:	00 d0       	rcall	.+0      	; 0x1652 <GPIO_togglePin+0x8>
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	6a 83       	std	Y+2, r22	; 0x02
  /* Check if the input port or pin number is invalid */
  if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	88 30       	cpi	r24, 0x08	; 8
    165e:	08 f0       	brcs	.+2      	; 0x1662 <GPIO_togglePin+0x18>
    1660:	72 c0       	rjmp	.+228    	; 0x1746 <GPIO_togglePin+0xfc>
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	84 30       	cpi	r24, 0x04	; 4
    1666:	08 f0       	brcs	.+2      	; 0x166a <GPIO_togglePin+0x20>
    1668:	6e c0       	rjmp	.+220    	; 0x1746 <GPIO_togglePin+0xfc>
      /* Do Nothing */
    }
  else
    {
      /* Write the pin value as required */
      switch (port_num)
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	3c 83       	std	Y+4, r19	; 0x04
    1672:	2b 83       	std	Y+3, r18	; 0x03
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	91 05       	cpc	r25, r1
    167c:	49 f1       	breq	.+82     	; 0x16d0 <GPIO_togglePin+0x86>
    167e:	2b 81       	ldd	r18, Y+3	; 0x03
    1680:	3c 81       	ldd	r19, Y+4	; 0x04
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	2c f4       	brge	.+10     	; 0x1692 <GPIO_togglePin+0x48>
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	61 f0       	breq	.+24     	; 0x16a8 <GPIO_togglePin+0x5e>
    1690:	5a c0       	rjmp	.+180    	; 0x1746 <GPIO_togglePin+0xfc>
    1692:	2b 81       	ldd	r18, Y+3	; 0x03
    1694:	3c 81       	ldd	r19, Y+4	; 0x04
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	31 05       	cpc	r19, r1
    169a:	71 f1       	breq	.+92     	; 0x16f8 <GPIO_togglePin+0xae>
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	83 30       	cpi	r24, 0x03	; 3
    16a2:	91 05       	cpc	r25, r1
    16a4:	e9 f1       	breq	.+122    	; 0x1720 <GPIO_togglePin+0xd6>
    16a6:	4f c0       	rjmp	.+158    	; 0x1746 <GPIO_togglePin+0xfc>
	{
	case PORTA_ID:
	  TOGGLE_BIT(PORTA, pin_num);
    16a8:	ab e3       	ldi	r26, 0x3B	; 59
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	eb e3       	ldi	r30, 0x3B	; 59
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <GPIO_togglePin+0x7c>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <GPIO_togglePin+0x78>
    16ca:	84 27       	eor	r24, r20
    16cc:	8c 93       	st	X, r24
    16ce:	3b c0       	rjmp	.+118    	; 0x1746 <GPIO_togglePin+0xfc>
	  break;
	case PORTB_ID:
	  TOGGLE_BIT(PORTB, pin_num);
    16d0:	a8 e3       	ldi	r26, 0x38	; 56
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e8 e3       	ldi	r30, 0x38	; 56
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <GPIO_togglePin+0xa4>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <GPIO_togglePin+0xa0>
    16f2:	84 27       	eor	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	27 c0       	rjmp	.+78     	; 0x1746 <GPIO_togglePin+0xfc>
	  break;
	case PORTC_ID:
	  TOGGLE_BIT(PORTC, pin_num);
    16f8:	a5 e3       	ldi	r26, 0x35	; 53
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e5 e3       	ldi	r30, 0x35	; 53
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <GPIO_togglePin+0xcc>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <GPIO_togglePin+0xc8>
    171a:	84 27       	eor	r24, r20
    171c:	8c 93       	st	X, r24
    171e:	13 c0       	rjmp	.+38     	; 0x1746 <GPIO_togglePin+0xfc>
	  break;
	case PORTD_ID:
	  TOGGLE_BIT(PORTD, pin_num);
    1720:	a2 e3       	ldi	r26, 0x32	; 50
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e2 e3       	ldi	r30, 0x32	; 50
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <GPIO_togglePin+0xf4>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <GPIO_togglePin+0xf0>
    1742:	84 27       	eor	r24, r20
    1744:	8c 93       	st	X, r24
	  break;
	}
    }
}
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <GPIO_readPin>:
 * @param pin_num Pin number (0 to NUM_OF_PINS_PER_PORT-1)
 *
 * @return Value of the pin (LOGIC_HIGH or LOGIC_LOW)
 */
uint8 GPIO_readPin (uint8 port_num, uint8 pin_num)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <GPIO_readPin+0x6>
    175a:	00 d0       	rcall	.+0      	; 0x175c <GPIO_readPin+0x8>
    175c:	0f 92       	push	r0
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	8a 83       	std	Y+2, r24	; 0x02
    1764:	6b 83       	std	Y+3, r22	; 0x03
  uint8 pin_value = LOGIC_LOW;
    1766:	19 82       	std	Y+1, r1	; 0x01

  /* Check if the input port or pin number is invalid */
  if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	88 30       	cpi	r24, 0x08	; 8
    176c:	08 f0       	brcs	.+2      	; 0x1770 <GPIO_readPin+0x1c>
    176e:	7d c0       	rjmp	.+250    	; 0x186a <GPIO_readPin+0x116>
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	84 30       	cpi	r24, 0x04	; 4
    1774:	08 f0       	brcs	.+2      	; 0x1778 <GPIO_readPin+0x24>
    1776:	79 c0       	rjmp	.+242    	; 0x186a <GPIO_readPin+0x116>
      /* Do Nothing */
    }
  else
    {
      /* Read the pin value as required */
      switch (port_num)
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	3d 83       	std	Y+5, r19	; 0x05
    1780:	2c 83       	std	Y+4, r18	; 0x04
    1782:	4c 81       	ldd	r20, Y+4	; 0x04
    1784:	5d 81       	ldd	r21, Y+5	; 0x05
    1786:	41 30       	cpi	r20, 0x01	; 1
    1788:	51 05       	cpc	r21, r1
    178a:	71 f1       	breq	.+92     	; 0x17e8 <GPIO_readPin+0x94>
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9d 81       	ldd	r25, Y+5	; 0x05
    1790:	82 30       	cpi	r24, 0x02	; 2
    1792:	91 05       	cpc	r25, r1
    1794:	34 f4       	brge	.+12     	; 0x17a2 <GPIO_readPin+0x4e>
    1796:	2c 81       	ldd	r18, Y+4	; 0x04
    1798:	3d 81       	ldd	r19, Y+5	; 0x05
    179a:	21 15       	cp	r18, r1
    179c:	31 05       	cpc	r19, r1
    179e:	69 f0       	breq	.+26     	; 0x17ba <GPIO_readPin+0x66>
    17a0:	64 c0       	rjmp	.+200    	; 0x186a <GPIO_readPin+0x116>
    17a2:	4c 81       	ldd	r20, Y+4	; 0x04
    17a4:	5d 81       	ldd	r21, Y+5	; 0x05
    17a6:	42 30       	cpi	r20, 0x02	; 2
    17a8:	51 05       	cpc	r21, r1
    17aa:	a1 f1       	breq	.+104    	; 0x1814 <GPIO_readPin+0xc0>
    17ac:	8c 81       	ldd	r24, Y+4	; 0x04
    17ae:	9d 81       	ldd	r25, Y+5	; 0x05
    17b0:	83 30       	cpi	r24, 0x03	; 3
    17b2:	91 05       	cpc	r25, r1
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <GPIO_readPin+0x64>
    17b6:	44 c0       	rjmp	.+136    	; 0x1840 <GPIO_readPin+0xec>
    17b8:	58 c0       	rjmp	.+176    	; 0x186a <GPIO_readPin+0x116>
	{
	case PORTA_ID:
	  if (BIT_IS_SET(PINA, pin_num))
    17ba:	e9 e3       	ldi	r30, 0x39	; 57
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a9 01       	movw	r20, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <GPIO_readPin+0x7e>
    17ce:	55 95       	asr	r21
    17d0:	47 95       	ror	r20
    17d2:	8a 95       	dec	r24
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <GPIO_readPin+0x7a>
    17d6:	ca 01       	movw	r24, r20
    17d8:	81 70       	andi	r24, 0x01	; 1
    17da:	90 70       	andi	r25, 0x00	; 0
    17dc:	88 23       	and	r24, r24
    17de:	09 f4       	brne	.+2      	; 0x17e2 <GPIO_readPin+0x8e>
    17e0:	44 c0       	rjmp	.+136    	; 0x186a <GPIO_readPin+0x116>
	    {
	      pin_value = LOGIC_HIGH;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	41 c0       	rjmp	.+130    	; 0x186a <GPIO_readPin+0x116>
	    }
	  break;
	case PORTB_ID:
	  if (BIT_IS_SET(PINB, pin_num))
    17e8:	e6 e3       	ldi	r30, 0x36	; 54
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	88 2f       	mov	r24, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	a9 01       	movw	r20, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <GPIO_readPin+0xac>
    17fc:	55 95       	asr	r21
    17fe:	47 95       	ror	r20
    1800:	8a 95       	dec	r24
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <GPIO_readPin+0xa8>
    1804:	ca 01       	movw	r24, r20
    1806:	81 70       	andi	r24, 0x01	; 1
    1808:	90 70       	andi	r25, 0x00	; 0
    180a:	88 23       	and	r24, r24
    180c:	71 f1       	breq	.+92     	; 0x186a <GPIO_readPin+0x116>
	    {
	      pin_value = LOGIC_HIGH;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	2b c0       	rjmp	.+86     	; 0x186a <GPIO_readPin+0x116>
	    }
	  break;
	case PORTC_ID:
	  if (BIT_IS_SET(PINC, pin_num))
    1814:	e3 e3       	ldi	r30, 0x33	; 51
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a9 01       	movw	r20, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <GPIO_readPin+0xd8>
    1828:	55 95       	asr	r21
    182a:	47 95       	ror	r20
    182c:	8a 95       	dec	r24
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <GPIO_readPin+0xd4>
    1830:	ca 01       	movw	r24, r20
    1832:	81 70       	andi	r24, 0x01	; 1
    1834:	90 70       	andi	r25, 0x00	; 0
    1836:	88 23       	and	r24, r24
    1838:	c1 f0       	breq	.+48     	; 0x186a <GPIO_readPin+0x116>
	    {
	      pin_value = LOGIC_HIGH;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	15 c0       	rjmp	.+42     	; 0x186a <GPIO_readPin+0x116>
	    }
	  break;
	case PORTD_ID:
	  if (BIT_IS_SET(PIND, pin_num))
    1840:	e0 e3       	ldi	r30, 0x30	; 48
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	88 2f       	mov	r24, r24
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a9 01       	movw	r20, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <GPIO_readPin+0x104>
    1854:	55 95       	asr	r21
    1856:	47 95       	ror	r20
    1858:	8a 95       	dec	r24
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <GPIO_readPin+0x100>
    185c:	ca 01       	movw	r24, r20
    185e:	81 70       	andi	r24, 0x01	; 1
    1860:	90 70       	andi	r25, 0x00	; 0
    1862:	88 23       	and	r24, r24
    1864:	11 f0       	breq	.+4      	; 0x186a <GPIO_readPin+0x116>
	    {
	      pin_value = LOGIC_HIGH;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	89 83       	std	Y+1, r24	; 0x01
	    }
	  break;
	}
    }

  return pin_value;
    186a:	89 81       	ldd	r24, Y+1	; 0x01
}
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <GPIO_setupPortDirection>:
 *
 * @param port_num Port number (0 to NUM_OF_PORTS-1)
 * @param direction Direction of the port (PORT_INPUT or PORT_OUTPUT)
 */
void GPIO_setupPortDirection (uint8 port_num, GPIO_PortDirectionType direction)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <GPIO_setupPortDirection+0x6>
    1882:	00 d0       	rcall	.+0      	; 0x1884 <GPIO_setupPortDirection+0x8>
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	6a 83       	std	Y+2, r22	; 0x02
  /* Check if the input port number is invalid */
  if (port_num >= NUM_OF_PORTS)
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	84 30       	cpi	r24, 0x04	; 4
    1890:	90 f5       	brcc	.+100    	; 0x18f6 <GPIO_setupPortDirection+0x7a>
      /* Do Nothing */
    }
  else
    {
      /* Setup the port direction as required */
      switch (port_num)
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	3c 83       	std	Y+4, r19	; 0x04
    189a:	2b 83       	std	Y+3, r18	; 0x03
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	91 05       	cpc	r25, r1
    18a4:	d1 f0       	breq	.+52     	; 0x18da <GPIO_setupPortDirection+0x5e>
    18a6:	2b 81       	ldd	r18, Y+3	; 0x03
    18a8:	3c 81       	ldd	r19, Y+4	; 0x04
    18aa:	22 30       	cpi	r18, 0x02	; 2
    18ac:	31 05       	cpc	r19, r1
    18ae:	2c f4       	brge	.+10     	; 0x18ba <GPIO_setupPortDirection+0x3e>
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	9c 81       	ldd	r25, Y+4	; 0x04
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	61 f0       	breq	.+24     	; 0x18d0 <GPIO_setupPortDirection+0x54>
    18b8:	1e c0       	rjmp	.+60     	; 0x18f6 <GPIO_setupPortDirection+0x7a>
    18ba:	2b 81       	ldd	r18, Y+3	; 0x03
    18bc:	3c 81       	ldd	r19, Y+4	; 0x04
    18be:	22 30       	cpi	r18, 0x02	; 2
    18c0:	31 05       	cpc	r19, r1
    18c2:	81 f0       	breq	.+32     	; 0x18e4 <GPIO_setupPortDirection+0x68>
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	83 30       	cpi	r24, 0x03	; 3
    18ca:	91 05       	cpc	r25, r1
    18cc:	81 f0       	breq	.+32     	; 0x18ee <GPIO_setupPortDirection+0x72>
    18ce:	13 c0       	rjmp	.+38     	; 0x18f6 <GPIO_setupPortDirection+0x7a>
	{
	case PORTA_ID:
	  DDRA = direction;
    18d0:	ea e3       	ldi	r30, 0x3A	; 58
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	80 83       	st	Z, r24
    18d8:	0e c0       	rjmp	.+28     	; 0x18f6 <GPIO_setupPortDirection+0x7a>
	  break;
	case PORTB_ID:
	  DDRB = direction;
    18da:	e7 e3       	ldi	r30, 0x37	; 55
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	80 83       	st	Z, r24
    18e2:	09 c0       	rjmp	.+18     	; 0x18f6 <GPIO_setupPortDirection+0x7a>
	  break;
	case PORTC_ID:
	  DDRC = direction;
    18e4:	e4 e3       	ldi	r30, 0x34	; 52
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	80 83       	st	Z, r24
    18ec:	04 c0       	rjmp	.+8      	; 0x18f6 <GPIO_setupPortDirection+0x7a>
	  break;
	case PORTD_ID:
	  DDRD = direction;
    18ee:	e1 e3       	ldi	r30, 0x31	; 49
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	80 83       	st	Z, r24
	  break;
	}
    }
}
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <GPIO_writePort>:
 *
 * @param port_num Port number (0 to NUM_OF_PORTS-1)
 * @param value Value to write to the port (0 to 255)
 */
void GPIO_writePort (uint8 port_num, uint8 value)
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	00 d0       	rcall	.+0      	; 0x190a <GPIO_writePort+0x6>
    190a:	00 d0       	rcall	.+0      	; 0x190c <GPIO_writePort+0x8>
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	6a 83       	std	Y+2, r22	; 0x02
  /* Check if the input port number is invalid */
  if (port_num >= NUM_OF_PORTS)
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	84 30       	cpi	r24, 0x04	; 4
    1918:	90 f5       	brcc	.+100    	; 0x197e <GPIO_writePort+0x7a>
      /* Do Nothing */
    }
  else
    {
      /* Write the port value as required */
      switch (port_num)
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	3c 83       	std	Y+4, r19	; 0x04
    1922:	2b 83       	std	Y+3, r18	; 0x03
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	81 30       	cpi	r24, 0x01	; 1
    192a:	91 05       	cpc	r25, r1
    192c:	d1 f0       	breq	.+52     	; 0x1962 <GPIO_writePort+0x5e>
    192e:	2b 81       	ldd	r18, Y+3	; 0x03
    1930:	3c 81       	ldd	r19, Y+4	; 0x04
    1932:	22 30       	cpi	r18, 0x02	; 2
    1934:	31 05       	cpc	r19, r1
    1936:	2c f4       	brge	.+10     	; 0x1942 <GPIO_writePort+0x3e>
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	61 f0       	breq	.+24     	; 0x1958 <GPIO_writePort+0x54>
    1940:	1e c0       	rjmp	.+60     	; 0x197e <GPIO_writePort+0x7a>
    1942:	2b 81       	ldd	r18, Y+3	; 0x03
    1944:	3c 81       	ldd	r19, Y+4	; 0x04
    1946:	22 30       	cpi	r18, 0x02	; 2
    1948:	31 05       	cpc	r19, r1
    194a:	81 f0       	breq	.+32     	; 0x196c <GPIO_writePort+0x68>
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	83 30       	cpi	r24, 0x03	; 3
    1952:	91 05       	cpc	r25, r1
    1954:	81 f0       	breq	.+32     	; 0x1976 <GPIO_writePort+0x72>
    1956:	13 c0       	rjmp	.+38     	; 0x197e <GPIO_writePort+0x7a>
	{
	case PORTA_ID:
	  PORTA = value;
    1958:	eb e3       	ldi	r30, 0x3B	; 59
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	80 83       	st	Z, r24
    1960:	0e c0       	rjmp	.+28     	; 0x197e <GPIO_writePort+0x7a>
	  break;
	case PORTB_ID:
	  PORTB = value;
    1962:	e8 e3       	ldi	r30, 0x38	; 56
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	80 83       	st	Z, r24
    196a:	09 c0       	rjmp	.+18     	; 0x197e <GPIO_writePort+0x7a>
	  break;
	case PORTC_ID:
	  PORTC = value;
    196c:	e5 e3       	ldi	r30, 0x35	; 53
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	80 83       	st	Z, r24
    1974:	04 c0       	rjmp	.+8      	; 0x197e <GPIO_writePort+0x7a>
	  break;
	case PORTD_ID:
	  PORTD = value;
    1976:	e2 e3       	ldi	r30, 0x32	; 50
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	80 83       	st	Z, r24
	  break;
	}
    }
}
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <GPIO_readPort>:
 * @param port_num Port number (0 to NUM_OF_PORTS-1)
 *
 * @return Value of the port (0 to 255)
 */
uint8 GPIO_readPort (uint8 port_num)
{
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	00 d0       	rcall	.+0      	; 0x1992 <GPIO_readPort+0x6>
    1992:	00 d0       	rcall	.+0      	; 0x1994 <GPIO_readPort+0x8>
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	8a 83       	std	Y+2, r24	; 0x02
  uint8 value = LOGIC_LOW;
    199a:	19 82       	std	Y+1, r1	; 0x01

  /* Check if the input port number is invalid */
  if (port_num >= NUM_OF_PORTS)
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	84 30       	cpi	r24, 0x04	; 4
    19a0:	90 f5       	brcc	.+100    	; 0x1a06 <GPIO_readPort+0x7a>
      /* Do Nothing */
    }
  else
    {
      /* Read the port value as required */
      switch (port_num)
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	3c 83       	std	Y+4, r19	; 0x04
    19aa:	2b 83       	std	Y+3, r18	; 0x03
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	9c 81       	ldd	r25, Y+4	; 0x04
    19b0:	81 30       	cpi	r24, 0x01	; 1
    19b2:	91 05       	cpc	r25, r1
    19b4:	d1 f0       	breq	.+52     	; 0x19ea <GPIO_readPort+0x5e>
    19b6:	2b 81       	ldd	r18, Y+3	; 0x03
    19b8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ba:	22 30       	cpi	r18, 0x02	; 2
    19bc:	31 05       	cpc	r19, r1
    19be:	2c f4       	brge	.+10     	; 0x19ca <GPIO_readPort+0x3e>
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	9c 81       	ldd	r25, Y+4	; 0x04
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	61 f0       	breq	.+24     	; 0x19e0 <GPIO_readPort+0x54>
    19c8:	1e c0       	rjmp	.+60     	; 0x1a06 <GPIO_readPort+0x7a>
    19ca:	2b 81       	ldd	r18, Y+3	; 0x03
    19cc:	3c 81       	ldd	r19, Y+4	; 0x04
    19ce:	22 30       	cpi	r18, 0x02	; 2
    19d0:	31 05       	cpc	r19, r1
    19d2:	81 f0       	breq	.+32     	; 0x19f4 <GPIO_readPort+0x68>
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	83 30       	cpi	r24, 0x03	; 3
    19da:	91 05       	cpc	r25, r1
    19dc:	81 f0       	breq	.+32     	; 0x19fe <GPIO_readPort+0x72>
    19de:	13 c0       	rjmp	.+38     	; 0x1a06 <GPIO_readPort+0x7a>
	{
	case PORTA_ID:
	  value = PINA;
    19e0:	e9 e3       	ldi	r30, 0x39	; 57
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	0e c0       	rjmp	.+28     	; 0x1a06 <GPIO_readPort+0x7a>
	  break;
	case PORTB_ID:
	  value = PINB;
    19ea:	e6 e3       	ldi	r30, 0x36	; 54
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	09 c0       	rjmp	.+18     	; 0x1a06 <GPIO_readPort+0x7a>
	  break;
	case PORTC_ID:
	  value = PINC;
    19f4:	e3 e3       	ldi	r30, 0x33	; 51
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	04 c0       	rjmp	.+8      	; 0x1a06 <GPIO_readPort+0x7a>
	  break;
	case PORTD_ID:
	  value = PIND;
    19fe:	e0 e3       	ldi	r30, 0x30	; 48
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	89 83       	std	Y+1, r24	; 0x01
	  break;
	}
    }

  return value;
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <ULTRA_init>:
 * @brief Initializes the Ultra-Sonic Sensor.
 *
 * This function sets up the GPIO pins for the trigger and echo, initializes Timer1,
 * and configures the Input Capture edge.
 */
void ULTRA_init(void) {
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
  GPIO_setupPinDirection(ULTRA_TRIG_PORT, ULTRA_TRIG_PIN, PIN_OUTPUT); /* Set trigger pin as output */
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
    1a20:	67 e0       	ldi	r22, 0x07	; 7
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	0e 94 4f 09 	call	0x129e	; 0x129e <GPIO_setupPinDirection>
  GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_INPUT); /* Set echo pin as input */
    1a28:	83 e0       	ldi	r24, 0x03	; 3
    1a2a:	66 e0       	ldi	r22, 0x06	; 6
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	0e 94 4f 09 	call	0x129e	; 0x129e <GPIO_setupPinDirection>

  TIMER1_init(&g_timer1); /* Initialize Timer1 */
    1a32:	85 ea       	ldi	r24, 0xA5	; 165
    1a34:	91 e0       	ldi	r25, 0x01	; 1
    1a36:	0e 94 17 07 	call	0xe2e	; 0xe2e <TIMER1_init>

  TIMER1_IC_EdgeSelect(TIMER1_INPUT_CAPTURE_RAISING); /* Set edge for input capture to rising */
    1a3a:	ee e4       	ldi	r30, 0x4E	; 78
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	80 64       	ori	r24, 0x40	; 64
    1a42:	80 83       	st	Z, r24

  TIMER1_set_IC_InterruptHandler(ULTRA_edgeHandler); /* Set interrupt handler for input capture */
    1a44:	89 e2       	ldi	r24, 0x29	; 41
    1a46:	9d e0       	ldi	r25, 0x0D	; 13
    1a48:	0e 94 0a 09 	call	0x1214	; 0x1214 <TIMER1_set_IC_InterruptHandler>
}
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <ULTRA_edgeHandler>:
 * @brief Handles the edge detection for the ultra-sonic sensor.
 *
 * This function is called on input capture interrupt to determine the distance
 * based on the time taken for the ultra-sonic pulse to return.
 */
void ULTRA_edgeHandler(void) {
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
  if (g_interruptCount == 0) {
    1a5a:	80 91 b9 01 	lds	r24, 0x01B9
    1a5e:	88 23       	and	r24, r24
    1a60:	89 f4       	brne	.+34     	; 0x1a84 <ULTRA_edgeHandler+0x32>
    g_ultra_ticks = ICR1; /* Get the captured timer value */
    1a62:	e6 e4       	ldi	r30, 0x46	; 70
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	91 81       	ldd	r25, Z+1	; 0x01
    1a6a:	90 93 b8 01 	sts	0x01B8, r25
    1a6e:	80 93 b7 01 	sts	0x01B7, r24
    TIMER1_IC_EdgeSelect(TIMER1_INPUT_CAPTURE_FALLING); /* Set edge for input capture to falling */
    1a72:	ee e4       	ldi	r30, 0x4E	; 78
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	8f 7b       	andi	r24, 0xBF	; 191
    1a7a:	80 83       	st	Z, r24
    g_interruptCount = 1; /* Increment interrupt count */
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	80 93 b9 01 	sts	0x01B9, r24
    1a82:	1a c0       	rjmp	.+52     	; 0x1ab8 <ULTRA_edgeHandler+0x66>
  }
  else {
    g_ultra_ticks = ICR1 - g_ultra_ticks; /* Get the captured timer value */
    1a84:	e6 e4       	ldi	r30, 0x46	; 70
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	20 81       	ld	r18, Z
    1a8a:	31 81       	ldd	r19, Z+1	; 0x01
    1a8c:	80 91 b7 01 	lds	r24, 0x01B7
    1a90:	90 91 b8 01 	lds	r25, 0x01B8
    1a94:	a9 01       	movw	r20, r18
    1a96:	48 1b       	sub	r20, r24
    1a98:	59 0b       	sbc	r21, r25
    1a9a:	ca 01       	movw	r24, r20
    1a9c:	90 93 b8 01 	sts	0x01B8, r25
    1aa0:	80 93 b7 01 	sts	0x01B7, r24
    TIMER1_DISABLE(); /* Disable Timer1 */
    1aa4:	ee e4       	ldi	r30, 0x4E	; 78
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	88 7f       	andi	r24, 0xF8	; 248
    1aac:	80 83       	st	Z, r24
    g_interruptCount = 0; /* Reset interrupt count */
    1aae:	10 92 b9 01 	sts	0x01B9, r1
    g_ultra_distance_ready = TRUE; /* Indicate that distance measurement is ready */
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	80 93 b6 01 	sts	0x01B6, r24
  }
}
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <ULTRA_start>:
 * This function triggers the ultra-sonic sensor to send out a pulse and
 * begins the distance measurement.
 *
 * @return TRUE if the measurement started successfully, FALSE otherwise.
 */
boolean ULTRA_start(void) {
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	69 97       	sbiw	r28, 0x19	; 25
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
  if (g_ultra_distance_ready == 0) {
    1ad2:	80 91 b6 01 	lds	r24, 0x01B6
    1ad6:	88 23       	and	r24, r24
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <ULTRA_start+0x1e>
    1ada:	df c0       	rjmp	.+446    	; 0x1c9a <ULTRA_start+0x1dc>
    TIMER1_ENABLE(); /* Enable Timer1 */
    1adc:	ee e4       	ldi	r30, 0x4E	; 78
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 91 a6 01 	lds	r24, 0x01A6
    1ae4:	87 70       	andi	r24, 0x07	; 7
    1ae6:	98 2f       	mov	r25, r24
    1ae8:	97 70       	andi	r25, 0x07	; 7
    1aea:	80 81       	ld	r24, Z
    1aec:	88 7f       	andi	r24, 0xF8	; 248
    1aee:	89 2b       	or	r24, r25
    1af0:	80 83       	st	Z, r24
    TIMER1_setTimerValue(0); /* Reset timer value */
    1af2:	ec e4       	ldi	r30, 0x4C	; 76
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	11 82       	std	Z+1, r1	; 0x01
    1af8:	10 82       	st	Z, r1
    TIMER1_IC_EdgeSelect(TIMER1_INPUT_CAPTURE_RAISING); /* Set edge for input capture to rising */
    1afa:	ee e4       	ldi	r30, 0x4E	; 78
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	80 64       	ori	r24, 0x40	; 64
    1b02:	80 83       	st	Z, r24
    GPIO_writePin(ULTRA_TRIG_PORT, ULTRA_TRIG_PIN, LOGIC_HIGH); /* Send trigger pulse */
    1b04:	83 e0       	ldi	r24, 0x03	; 3
    1b06:	67 e0       	ldi	r22, 0x07	; 7
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a0 e2       	ldi	r26, 0x20	; 32
    1b14:	b1 e4       	ldi	r27, 0x41	; 65
    1b16:	8d 8b       	std	Y+21, r24	; 0x15
    1b18:	9e 8b       	std	Y+22, r25	; 0x16
    1b1a:	af 8b       	std	Y+23, r26	; 0x17
    1b1c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b20:	7e 89       	ldd	r23, Y+22	; 0x16
    1b22:	8f 89       	ldd	r24, Y+23	; 0x17
    1b24:	98 8d       	ldd	r25, Y+24	; 0x18
    1b26:	2b ea       	ldi	r18, 0xAB	; 171
    1b28:	3a ea       	ldi	r19, 0xAA	; 170
    1b2a:	4a ea       	ldi	r20, 0xAA	; 170
    1b2c:	50 e4       	ldi	r21, 0x40	; 64
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	89 8b       	std	Y+17, r24	; 0x11
    1b38:	9a 8b       	std	Y+18, r25	; 0x12
    1b3a:	ab 8b       	std	Y+19, r26	; 0x13
    1b3c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b3e:	69 89       	ldd	r22, Y+17	; 0x11
    1b40:	7a 89       	ldd	r23, Y+18	; 0x12
    1b42:	8b 89       	ldd	r24, Y+19	; 0x13
    1b44:	9c 89       	ldd	r25, Y+20	; 0x14
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	5f e3       	ldi	r21, 0x3F	; 63
    1b4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b52:	88 23       	and	r24, r24
    1b54:	1c f4       	brge	.+6      	; 0x1b5c <ULTRA_start+0x9e>
		__ticks = 1;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	88 8b       	std	Y+16, r24	; 0x10
    1b5a:	91 c0       	rjmp	.+290    	; 0x1c7e <ULTRA_start+0x1c0>
	else if (__tmp > 255)
    1b5c:	69 89       	ldd	r22, Y+17	; 0x11
    1b5e:	7a 89       	ldd	r23, Y+18	; 0x12
    1b60:	8b 89       	ldd	r24, Y+19	; 0x13
    1b62:	9c 89       	ldd	r25, Y+20	; 0x14
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4f e7       	ldi	r20, 0x7F	; 127
    1b6a:	53 e4       	ldi	r21, 0x43	; 67
    1b6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b70:	18 16       	cp	r1, r24
    1b72:	0c f0       	brlt	.+2      	; 0x1b76 <ULTRA_start+0xb8>
    1b74:	7b c0       	rjmp	.+246    	; 0x1c6c <ULTRA_start+0x1ae>
	{
		_delay_ms(__us / 1000.0);
    1b76:	6d 89       	ldd	r22, Y+21	; 0x15
    1b78:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4a e7       	ldi	r20, 0x7A	; 122
    1b84:	54 e4       	ldi	r21, 0x44	; 68
    1b86:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	8c 87       	std	Y+12, r24	; 0x0c
    1b90:	9d 87       	std	Y+13, r25	; 0x0d
    1b92:	ae 87       	std	Y+14, r26	; 0x0e
    1b94:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b96:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b98:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	4a e7       	ldi	r20, 0x7A	; 122
    1ba4:	55 e4       	ldi	r21, 0x45	; 69
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	88 87       	std	Y+8, r24	; 0x08
    1bb0:	99 87       	std	Y+9, r25	; 0x09
    1bb2:	aa 87       	std	Y+10, r26	; 0x0a
    1bb4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1bb6:	68 85       	ldd	r22, Y+8	; 0x08
    1bb8:	79 85       	ldd	r23, Y+9	; 0x09
    1bba:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bbc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e8       	ldi	r20, 0x80	; 128
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bca:	88 23       	and	r24, r24
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <ULTRA_start+0x11a>
		__ticks = 1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9f 83       	std	Y+7, r25	; 0x07
    1bd4:	8e 83       	std	Y+6, r24	; 0x06
    1bd6:	3f c0       	rjmp	.+126    	; 0x1c56 <ULTRA_start+0x198>
	else if (__tmp > 65535)
    1bd8:	68 85       	ldd	r22, Y+8	; 0x08
    1bda:	79 85       	ldd	r23, Y+9	; 0x09
    1bdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bde:	9b 85       	ldd	r25, Y+11	; 0x0b
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	3f ef       	ldi	r19, 0xFF	; 255
    1be4:	4f e7       	ldi	r20, 0x7F	; 127
    1be6:	57 e4       	ldi	r21, 0x47	; 71
    1be8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bec:	18 16       	cp	r1, r24
    1bee:	4c f5       	brge	.+82     	; 0x1c42 <ULTRA_start+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bf2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bf4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bf6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e2       	ldi	r20, 0x20	; 32
    1bfe:	51 e4       	ldi	r21, 0x41	; 65
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9f 83       	std	Y+7, r25	; 0x07
    1c16:	8e 83       	std	Y+6, r24	; 0x06
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <ULTRA_start+0x17a>
    1c1a:	80 e9       	ldi	r24, 0x90	; 144
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	9d 83       	std	Y+5, r25	; 0x05
    1c20:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c22:	8c 81       	ldd	r24, Y+4	; 0x04
    1c24:	9d 81       	ldd	r25, Y+5	; 0x05
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <ULTRA_start+0x168>
    1c2a:	9d 83       	std	Y+5, r25	; 0x05
    1c2c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c30:	9f 81       	ldd	r25, Y+7	; 0x07
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	9f 83       	std	Y+7, r25	; 0x07
    1c36:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c38:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	69 f7       	brne	.-38     	; 0x1c1a <ULTRA_start+0x15c>
    1c40:	24 c0       	rjmp	.+72     	; 0x1c8a <ULTRA_start+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c42:	68 85       	ldd	r22, Y+8	; 0x08
    1c44:	79 85       	ldd	r23, Y+9	; 0x09
    1c46:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c48:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9f 83       	std	Y+7, r25	; 0x07
    1c54:	8e 83       	std	Y+6, r24	; 0x06
    1c56:	8e 81       	ldd	r24, Y+6	; 0x06
    1c58:	9f 81       	ldd	r25, Y+7	; 0x07
    1c5a:	9b 83       	std	Y+3, r25	; 0x03
    1c5c:	8a 83       	std	Y+2, r24	; 0x02
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	9b 81       	ldd	r25, Y+3	; 0x03
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <ULTRA_start+0x1a4>
    1c66:	9b 83       	std	Y+3, r25	; 0x03
    1c68:	8a 83       	std	Y+2, r24	; 0x02
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <ULTRA_start+0x1cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c6c:	69 89       	ldd	r22, Y+17	; 0x11
    1c6e:	7a 89       	ldd	r23, Y+18	; 0x12
    1c70:	8b 89       	ldd	r24, Y+19	; 0x13
    1c72:	9c 89       	ldd	r25, Y+20	; 0x14
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	88 8b       	std	Y+16, r24	; 0x10
    1c7e:	88 89       	ldd	r24, Y+16	; 0x10
    1c80:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	8a 95       	dec	r24
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <ULTRA_start+0x1c6>
    1c88:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10); /* Wait for 10 microseconds */
    GPIO_writePin(ULTRA_TRIG_PORT, ULTRA_TRIG_PIN, LOGIC_LOW); /* Stop trigger pulse */
    1c8a:	83 e0       	ldi	r24, 0x03	; 3
    1c8c:	67 e0       	ldi	r22, 0x07	; 7
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
  }
  else {
    return FALSE; /* Measurement in progress, return FALSE */
  }
  return TRUE; /* Measurement started successfully, return TRUE */
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	89 8f       	std	Y+25, r24	; 0x19
    1c98:	01 c0       	rjmp	.+2      	; 0x1c9c <ULTRA_start+0x1de>
    GPIO_writePin(ULTRA_TRIG_PORT, ULTRA_TRIG_PIN, LOGIC_HIGH); /* Send trigger pulse */
    _delay_us(10); /* Wait for 10 microseconds */
    GPIO_writePin(ULTRA_TRIG_PORT, ULTRA_TRIG_PIN, LOGIC_LOW); /* Stop trigger pulse */
  }
  else {
    return FALSE; /* Measurement in progress, return FALSE */
    1c9a:	19 8e       	std	Y+25, r1	; 0x19
    1c9c:	89 8d       	ldd	r24, Y+25	; 0x19
  }
  return TRUE; /* Measurement started successfully, return TRUE */
}
    1c9e:	69 96       	adiw	r28, 0x19	; 25
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <ULTRA_readDistance>:
 * This function calculates and returns the distance in centimeters based on
 * the ticks measured by Timer1.
 *
 * @return The distance measured in centimeters.
 */
uint16 ULTRA_readDistance(void) {
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
  g_ultra_distanceCm = (g_ultra_ticks + ULTRA_TICKS_ERROR_ADJUST) * c_tickTimeUs
    1cb8:	80 91 b7 01 	lds	r24, 0x01B7
    1cbc:	90 91 b8 01 	lds	r25, 0x01B8
    1cc0:	81 5a       	subi	r24, 0xA1	; 161
    1cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc4:	cc 01       	movw	r24, r24
    1cc6:	a0 e0       	ldi	r26, 0x00	; 0
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	20 91 ab 01 	lds	r18, 0x01AB
    1cda:	30 91 ac 01 	lds	r19, 0x01AC
    1cde:	40 91 ad 01 	lds	r20, 0x01AD
    1ce2:	50 91 ae 01 	lds	r21, 0x01AE
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	cd 01       	movw	r24, r26
    1cf6:	26 e9       	ldi	r18, 0x96	; 150
    1cf8:	33 e4       	ldi	r19, 0x43	; 67
    1cfa:	4b e8       	ldi	r20, 0x8B	; 139
    1cfc:	5c e3       	ldi	r21, 0x3C	; 60
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	90 93 b5 01 	sts	0x01B5, r25
    1d16:	80 93 b4 01 	sts	0x01B4, r24
      * ULTRA_SPEED_SOUND_DIV_2_CM_US; /* Calculate distance */
  g_ultra_distance_ready = FALSE; /* Reset the distance ready flag */
    1d1a:	10 92 b6 01 	sts	0x01B6, r1
  return g_ultra_distanceCm; /* Return the measured distance */
    1d1e:	80 91 b4 01 	lds	r24, 0x01B4
    1d22:	90 91 b5 01 	lds	r25, 0x01B5
}
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <LED_init>:
 *
 * This function configures the GPIO pin for the LED as an output.
 *
 * @param led Pointer to the LED configuration structure.
 */
void LED_init(LED_t *led) {
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <LED_init+0x6>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
  GPIO_setupPinDirection(led->port, led->pin, PIN_OUTPUT);  /* Set the pin direction to output */
    1d3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3e:	80 81       	ld	r24, Z
    1d40:	83 70       	andi	r24, 0x03	; 3
    1d42:	28 2f       	mov	r18, r24
    1d44:	e9 81       	ldd	r30, Y+1	; 0x01
    1d46:	fa 81       	ldd	r31, Y+2	; 0x02
    1d48:	80 81       	ld	r24, Z
    1d4a:	86 95       	lsr	r24
    1d4c:	86 95       	lsr	r24
    1d4e:	87 70       	andi	r24, 0x07	; 7
    1d50:	98 2f       	mov	r25, r24
    1d52:	82 2f       	mov	r24, r18
    1d54:	69 2f       	mov	r22, r25
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 4f 09 	call	0x129e	; 0x129e <GPIO_setupPinDirection>
}
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <LED_turnOn>:
 *
 * This function activates the LED based on its logic configuration.
 *
 * @param led Pointer to the LED configuration structure.
 */
void LED_turnOn(LED_t *led) {
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <LED_turnOn+0x6>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
  GPIO_writePin(led->port, led->pin, LOGIC_HIGH ^ led->ledLogic);  /* Write the appropriate logic level to turn on the LED */
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	80 81       	ld	r24, Z
    1d7a:	83 70       	andi	r24, 0x03	; 3
    1d7c:	38 2f       	mov	r19, r24
    1d7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d80:	fa 81       	ldd	r31, Y+2	; 0x02
    1d82:	80 81       	ld	r24, Z
    1d84:	86 95       	lsr	r24
    1d86:	86 95       	lsr	r24
    1d88:	87 70       	andi	r24, 0x07	; 7
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d90:	80 81       	ld	r24, Z
    1d92:	82 95       	swap	r24
    1d94:	86 95       	lsr	r24
    1d96:	87 70       	andi	r24, 0x07	; 7
    1d98:	81 70       	andi	r24, 0x01	; 1
    1d9a:	91 e0       	ldi	r25, 0x01	; 1
    1d9c:	89 27       	eor	r24, r25
    1d9e:	81 70       	andi	r24, 0x01	; 1
    1da0:	98 2f       	mov	r25, r24
    1da2:	83 2f       	mov	r24, r19
    1da4:	62 2f       	mov	r22, r18
    1da6:	49 2f       	mov	r20, r25
    1da8:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <LED_turnOff>:
 *
 * This function deactivates the LED based on its logic configuration.
 *
 * @param led Pointer to the LED configuration structure.
 */
void LED_turnOff(LED_t *led) {
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <LED_turnOff+0x6>
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	89 83       	std	Y+1, r24	; 0x01
  GPIO_writePin(led->port, led->pin, LOGIC_LOW ^ led->ledLogic);   /* Write the appropriate logic level to turn off the LED */
    1dc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc8:	80 81       	ld	r24, Z
    1dca:	83 70       	andi	r24, 0x03	; 3
    1dcc:	38 2f       	mov	r19, r24
    1dce:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd2:	80 81       	ld	r24, Z
    1dd4:	86 95       	lsr	r24
    1dd6:	86 95       	lsr	r24
    1dd8:	87 70       	andi	r24, 0x07	; 7
    1dda:	28 2f       	mov	r18, r24
    1ddc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dde:	fa 81       	ldd	r31, Y+2	; 0x02
    1de0:	80 81       	ld	r24, Z
    1de2:	82 95       	swap	r24
    1de4:	86 95       	lsr	r24
    1de6:	87 70       	andi	r24, 0x07	; 7
    1de8:	81 70       	andi	r24, 0x01	; 1
    1dea:	98 2f       	mov	r25, r24
    1dec:	83 2f       	mov	r24, r19
    1dee:	62 2f       	mov	r22, r18
    1df0:	49 2f       	mov	r20, r25
    1df2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
}
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <LED_toggle>:
 * This function changes the LED state from on to off or vice versa based
 * on its logic configuration.
 *
 * @param led Pointer to the LED configuration structure.
 */
void LED_toggle(LED_t *led) {
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <LED_toggle+0x6>
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	9a 83       	std	Y+2, r25	; 0x02
    1e0c:	89 83       	std	Y+1, r24	; 0x01
  GPIO_togglePin(led->port, led->pin);  /* Toggle the pin state */
    1e0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e10:	fa 81       	ldd	r31, Y+2	; 0x02
    1e12:	80 81       	ld	r24, Z
    1e14:	83 70       	andi	r24, 0x03	; 3
    1e16:	28 2f       	mov	r18, r24
    1e18:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1c:	80 81       	ld	r24, Z
    1e1e:	86 95       	lsr	r24
    1e20:	86 95       	lsr	r24
    1e22:	87 70       	andi	r24, 0x07	; 7
    1e24:	98 2f       	mov	r25, r24
    1e26:	82 2f       	mov	r24, r18
    1e28:	69 2f       	mov	r22, r25
    1e2a:	0e 94 25 0b 	call	0x164a	; 0x164a <GPIO_togglePin>
}
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	2e 97       	sbiw	r28, 0x0e	; 14
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
  /* Configure the direction for RS and E pins as output pins */
  GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	61 e0       	ldi	r22, 0x01	; 1
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 4f 09 	call	0x129e	; 0x129e <GPIO_setupPinDirection>
  GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	62 e0       	ldi	r22, 0x02	; 2
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 4f 09 	call	0x129e	; 0x129e <GPIO_setupPinDirection>
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a0 ea       	ldi	r26, 0xA0	; 160
    1e66:	b1 e4       	ldi	r27, 0x41	; 65
    1e68:	8b 87       	std	Y+11, r24	; 0x0b
    1e6a:	9c 87       	std	Y+12, r25	; 0x0c
    1e6c:	ad 87       	std	Y+13, r26	; 0x0d
    1e6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	4a e7       	ldi	r20, 0x7A	; 122
    1e7e:	55 e4       	ldi	r21, 0x45	; 69
    1e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	8f 83       	std	Y+7, r24	; 0x07
    1e8a:	98 87       	std	Y+8, r25	; 0x08
    1e8c:	a9 87       	std	Y+9, r26	; 0x09
    1e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e90:	6f 81       	ldd	r22, Y+7	; 0x07
    1e92:	78 85       	ldd	r23, Y+8	; 0x08
    1e94:	89 85       	ldd	r24, Y+9	; 0x09
    1e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	2c f4       	brge	.+10     	; 0x1eb2 <LCD_init+0x7a>
		__ticks = 1;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	9e 83       	std	Y+6, r25	; 0x06
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	3f c0       	rjmp	.+126    	; 0x1f30 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb4:	78 85       	ldd	r23, Y+8	; 0x08
    1eb6:	89 85       	ldd	r24, Y+9	; 0x09
    1eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	3f ef       	ldi	r19, 0xFF	; 255
    1ebe:	4f e7       	ldi	r20, 0x7F	; 127
    1ec0:	57 e4       	ldi	r21, 0x47	; 71
    1ec2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ec6:	18 16       	cp	r1, r24
    1ec8:	4c f5       	brge	.+82     	; 0x1f1c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e2       	ldi	r20, 0x20	; 32
    1ed8:	51 e4       	ldi	r21, 0x41	; 65
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	9e 83       	std	Y+6, r25	; 0x06
    1ef0:	8d 83       	std	Y+5, r24	; 0x05
    1ef2:	0f c0       	rjmp	.+30     	; 0x1f12 <LCD_init+0xda>
    1ef4:	80 e9       	ldi	r24, 0x90	; 144
    1ef6:	91 e0       	ldi	r25, 0x01	; 1
    1ef8:	9c 83       	std	Y+4, r25	; 0x04
    1efa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <LCD_init+0xc8>
    1f04:	9c 83       	std	Y+4, r25	; 0x04
    1f06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	9e 83       	std	Y+6, r25	; 0x06
    1f10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f12:	8d 81       	ldd	r24, Y+5	; 0x05
    1f14:	9e 81       	ldd	r25, Y+6	; 0x06
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	69 f7       	brne	.-38     	; 0x1ef4 <LCD_init+0xbc>
    1f1a:	14 c0       	rjmp	.+40     	; 0x1f44 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1e:	78 85       	ldd	r23, Y+8	; 0x08
    1f20:	89 85       	ldd	r24, Y+9	; 0x09
    1f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
    1f30:	8d 81       	ldd	r24, Y+5	; 0x05
    1f32:	9e 81       	ldd	r25, Y+6	; 0x06
    1f34:	9a 83       	std	Y+2, r25	; 0x02
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <LCD_init+0x104>
    1f40:	9a 83       	std	Y+2, r25	; 0x02
    1f42:	89 83       	std	Y+1, r24	; 0x01

  _delay_ms(20); /* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	63 e0       	ldi	r22, 0x03	; 3
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 4f 09 	call	0x129e	; 0x129e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	64 e0       	ldi	r22, 0x04	; 4
    1f52:	41 e0       	ldi	r20, 0x01	; 1
    1f54:	0e 94 4f 09 	call	0x129e	; 0x129e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	65 e0       	ldi	r22, 0x05	; 5
    1f5c:	41 e0       	ldi	r20, 0x01	; 1
    1f5e:	0e 94 4f 09 	call	0x129e	; 0x129e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	66 e0       	ldi	r22, 0x06	; 6
    1f66:	41 e0       	ldi	r20, 0x01	; 1
    1f68:	0e 94 4f 09 	call	0x129e	; 0x129e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1f6c:	83 e3       	ldi	r24, 0x33	; 51
    1f6e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1f72:	82 e3       	ldi	r24, 0x32	; 50
    1f74:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1f78:	88 e2       	ldi	r24, 0x28	; 40
    1f7a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <LCD_sendCommand>
  /* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
  LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

  LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f7e:	8c e0       	ldi	r24, 0x0C	; 12
    1f80:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <LCD_sendCommand>
  LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <LCD_sendCommand>
}
    1f8a:	2e 96       	adiw	r28, 0x0e	; 14
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <LCD_sendCommand>:
 * Description: Sends the specified command to the LCD.
 *
 * @param command: The command to be sent.
 */
void LCD_sendCommand(uint8 command)
{
    1f9c:	0f 93       	push	r16
    1f9e:	1f 93       	push	r17
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	c3 56       	subi	r28, 0x63	; 99
    1faa:	d0 40       	sbci	r29, 0x00	; 0
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	ed 59       	subi	r30, 0x9D	; 157
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	80 83       	st	Z, r24
  GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	61 e0       	ldi	r22, 0x01	; 1
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e1 5a       	subi	r30, 0xA1	; 161
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a0 e8       	ldi	r26, 0x80	; 128
    1fd4:	bf e3       	ldi	r27, 0x3F	; 63
    1fd6:	80 83       	st	Z, r24
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	a2 83       	std	Z+2, r26	; 0x02
    1fdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	8e 01       	movw	r16, r28
    1fe0:	05 5a       	subi	r16, 0xA5	; 165
    1fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e1 5a       	subi	r30, 0xA1	; 161
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	93 81       	ldd	r25, Z+3	; 0x03
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	4a e7       	ldi	r20, 0x7A	; 122
    1ff8:	55 e4       	ldi	r21, 0x45	; 69
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	f8 01       	movw	r30, r16
    2004:	80 83       	st	Z, r24
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	a2 83       	std	Z+2, r26	; 0x02
    200a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    200c:	fe 01       	movw	r30, r28
    200e:	e5 5a       	subi	r30, 0xA5	; 165
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	60 81       	ld	r22, Z
    2014:	71 81       	ldd	r23, Z+1	; 0x01
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e8       	ldi	r20, 0x80	; 128
    2020:	5f e3       	ldi	r21, 0x3F	; 63
    2022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2026:	88 23       	and	r24, r24
    2028:	44 f4       	brge	.+16     	; 0x203a <LCD_sendCommand+0x9e>
		__ticks = 1;
    202a:	fe 01       	movw	r30, r28
    202c:	e7 5a       	subi	r30, 0xA7	; 167
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	80 83       	st	Z, r24
    2038:	64 c0       	rjmp	.+200    	; 0x2102 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    203a:	fe 01       	movw	r30, r28
    203c:	e5 5a       	subi	r30, 0xA5	; 165
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	60 81       	ld	r22, Z
    2042:	71 81       	ldd	r23, Z+1	; 0x01
    2044:	82 81       	ldd	r24, Z+2	; 0x02
    2046:	93 81       	ldd	r25, Z+3	; 0x03
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	0c f0       	brlt	.+2      	; 0x205a <LCD_sendCommand+0xbe>
    2058:	43 c0       	rjmp	.+134    	; 0x20e0 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	fe 01       	movw	r30, r28
    205c:	e1 5a       	subi	r30, 0xA1	; 161
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	60 81       	ld	r22, Z
    2062:	71 81       	ldd	r23, Z+1	; 0x01
    2064:	82 81       	ldd	r24, Z+2	; 0x02
    2066:	93 81       	ldd	r25, Z+3	; 0x03
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e2       	ldi	r20, 0x20	; 32
    206e:	51 e4       	ldi	r21, 0x41	; 65
    2070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	8e 01       	movw	r16, r28
    207a:	07 5a       	subi	r16, 0xA7	; 167
    207c:	1f 4f       	sbci	r17, 0xFF	; 255
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	f8 01       	movw	r30, r16
    208c:	91 83       	std	Z+1, r25	; 0x01
    208e:	80 83       	st	Z, r24
    2090:	1f c0       	rjmp	.+62     	; 0x20d0 <LCD_sendCommand+0x134>
    2092:	fe 01       	movw	r30, r28
    2094:	e9 5a       	subi	r30, 0xA9	; 169
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	80 e9       	ldi	r24, 0x90	; 144
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	80 83       	st	Z, r24
    20a0:	fe 01       	movw	r30, r28
    20a2:	e9 5a       	subi	r30, 0xA9	; 169
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	80 81       	ld	r24, Z
    20a8:	91 81       	ldd	r25, Z+1	; 0x01
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <LCD_sendCommand+0x10e>
    20ae:	fe 01       	movw	r30, r28
    20b0:	e9 5a       	subi	r30, 0xA9	; 169
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b8:	de 01       	movw	r26, r28
    20ba:	a7 5a       	subi	r26, 0xA7	; 167
    20bc:	bf 4f       	sbci	r27, 0xFF	; 255
    20be:	fe 01       	movw	r30, r28
    20c0:	e7 5a       	subi	r30, 0xA7	; 167
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	11 96       	adiw	r26, 0x01	; 1
    20cc:	9c 93       	st	X, r25
    20ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d0:	fe 01       	movw	r30, r28
    20d2:	e7 5a       	subi	r30, 0xA7	; 167
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	80 81       	ld	r24, Z
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	d1 f6       	brne	.-76     	; 0x2092 <LCD_sendCommand+0xf6>
    20de:	27 c0       	rjmp	.+78     	; 0x212e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	8e 01       	movw	r16, r28
    20e2:	07 5a       	subi	r16, 0xA7	; 167
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	fe 01       	movw	r30, r28
    20e8:	e5 5a       	subi	r30, 0xA5	; 165
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	60 81       	ld	r22, Z
    20ee:	71 81       	ldd	r23, Z+1	; 0x01
    20f0:	82 81       	ldd	r24, Z+2	; 0x02
    20f2:	93 81       	ldd	r25, Z+3	; 0x03
    20f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	f8 01       	movw	r30, r16
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	80 83       	st	Z, r24
    2102:	de 01       	movw	r26, r28
    2104:	ab 5a       	subi	r26, 0xAB	; 171
    2106:	bf 4f       	sbci	r27, 0xFF	; 255
    2108:	fe 01       	movw	r30, r28
    210a:	e7 5a       	subi	r30, 0xA7	; 167
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	80 81       	ld	r24, Z
    2110:	91 81       	ldd	r25, Z+1	; 0x01
    2112:	8d 93       	st	X+, r24
    2114:	9c 93       	st	X, r25
    2116:	fe 01       	movw	r30, r28
    2118:	eb 5a       	subi	r30, 0xAB	; 171
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	80 81       	ld	r24, Z
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <LCD_sendCommand+0x184>
    2124:	fe 01       	movw	r30, r28
    2126:	eb 5a       	subi	r30, 0xAB	; 171
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	91 83       	std	Z+1, r25	; 0x01
    212c:	80 83       	st	Z, r24
  _delay_ms(1); /* delay for processing Tas = 50ns */
  GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	62 e0       	ldi	r22, 0x02	; 2
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    2138:	fe 01       	movw	r30, r28
    213a:	ef 5a       	subi	r30, 0xAF	; 175
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	a0 e8       	ldi	r26, 0x80	; 128
    2144:	bf e3       	ldi	r27, 0x3F	; 63
    2146:	80 83       	st	Z, r24
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	a2 83       	std	Z+2, r26	; 0x02
    214c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214e:	8e 01       	movw	r16, r28
    2150:	03 5b       	subi	r16, 0xB3	; 179
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
    2154:	fe 01       	movw	r30, r28
    2156:	ef 5a       	subi	r30, 0xAF	; 175
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a e7       	ldi	r20, 0x7A	; 122
    2168:	55 e4       	ldi	r21, 0x45	; 69
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	f8 01       	movw	r30, r16
    2174:	80 83       	st	Z, r24
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	a2 83       	std	Z+2, r26	; 0x02
    217a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    217c:	fe 01       	movw	r30, r28
    217e:	e3 5b       	subi	r30, 0xB3	; 179
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	60 81       	ld	r22, Z
    2184:	71 81       	ldd	r23, Z+1	; 0x01
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	93 81       	ldd	r25, Z+3	; 0x03
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e8       	ldi	r20, 0x80	; 128
    2190:	5f e3       	ldi	r21, 0x3F	; 63
    2192:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2196:	88 23       	and	r24, r24
    2198:	44 f4       	brge	.+16     	; 0x21aa <LCD_sendCommand+0x20e>
		__ticks = 1;
    219a:	fe 01       	movw	r30, r28
    219c:	e5 5b       	subi	r30, 0xB5	; 181
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
    21a8:	64 c0       	rjmp	.+200    	; 0x2272 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    21aa:	fe 01       	movw	r30, r28
    21ac:	e3 5b       	subi	r30, 0xB3	; 179
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	60 81       	ld	r22, Z
    21b2:	71 81       	ldd	r23, Z+1	; 0x01
    21b4:	82 81       	ldd	r24, Z+2	; 0x02
    21b6:	93 81       	ldd	r25, Z+3	; 0x03
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	3f ef       	ldi	r19, 0xFF	; 255
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	57 e4       	ldi	r21, 0x47	; 71
    21c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	0c f0       	brlt	.+2      	; 0x21ca <LCD_sendCommand+0x22e>
    21c8:	43 c0       	rjmp	.+134    	; 0x2250 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ca:	fe 01       	movw	r30, r28
    21cc:	ef 5a       	subi	r30, 0xAF	; 175
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	60 81       	ld	r22, Z
    21d2:	71 81       	ldd	r23, Z+1	; 0x01
    21d4:	82 81       	ldd	r24, Z+2	; 0x02
    21d6:	93 81       	ldd	r25, Z+3	; 0x03
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e2       	ldi	r20, 0x20	; 32
    21de:	51 e4       	ldi	r21, 0x41	; 65
    21e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	8e 01       	movw	r16, r28
    21ea:	05 5b       	subi	r16, 0xB5	; 181
    21ec:	1f 4f       	sbci	r17, 0xFF	; 255
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	f8 01       	movw	r30, r16
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	80 83       	st	Z, r24
    2200:	1f c0       	rjmp	.+62     	; 0x2240 <LCD_sendCommand+0x2a4>
    2202:	fe 01       	movw	r30, r28
    2204:	e7 5b       	subi	r30, 0xB7	; 183
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	80 e9       	ldi	r24, 0x90	; 144
    220a:	91 e0       	ldi	r25, 0x01	; 1
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	80 83       	st	Z, r24
    2210:	fe 01       	movw	r30, r28
    2212:	e7 5b       	subi	r30, 0xB7	; 183
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	80 81       	ld	r24, Z
    2218:	91 81       	ldd	r25, Z+1	; 0x01
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_sendCommand+0x27e>
    221e:	fe 01       	movw	r30, r28
    2220:	e7 5b       	subi	r30, 0xB7	; 183
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2228:	de 01       	movw	r26, r28
    222a:	a5 5b       	subi	r26, 0xB5	; 181
    222c:	bf 4f       	sbci	r27, 0xFF	; 255
    222e:	fe 01       	movw	r30, r28
    2230:	e5 5b       	subi	r30, 0xB5	; 181
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	11 96       	adiw	r26, 0x01	; 1
    223c:	9c 93       	st	X, r25
    223e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2240:	fe 01       	movw	r30, r28
    2242:	e5 5b       	subi	r30, 0xB5	; 181
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	d1 f6       	brne	.-76     	; 0x2202 <LCD_sendCommand+0x266>
    224e:	27 c0       	rjmp	.+78     	; 0x229e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2250:	8e 01       	movw	r16, r28
    2252:	05 5b       	subi	r16, 0xB5	; 181
    2254:	1f 4f       	sbci	r17, 0xFF	; 255
    2256:	fe 01       	movw	r30, r28
    2258:	e3 5b       	subi	r30, 0xB3	; 179
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	60 81       	ld	r22, Z
    225e:	71 81       	ldd	r23, Z+1	; 0x01
    2260:	82 81       	ldd	r24, Z+2	; 0x02
    2262:	93 81       	ldd	r25, Z+3	; 0x03
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	f8 01       	movw	r30, r16
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
    2272:	de 01       	movw	r26, r28
    2274:	a9 5b       	subi	r26, 0xB9	; 185
    2276:	bf 4f       	sbci	r27, 0xFF	; 255
    2278:	fe 01       	movw	r30, r28
    227a:	e5 5b       	subi	r30, 0xB5	; 181
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	8d 93       	st	X+, r24
    2284:	9c 93       	st	X, r25
    2286:	fe 01       	movw	r30, r28
    2288:	e9 5b       	subi	r30, 0xB9	; 185
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <LCD_sendCommand+0x2f4>
    2294:	fe 01       	movw	r30, r28
    2296:	e9 5b       	subi	r30, 0xB9	; 185
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
  _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 4));
    229e:	fe 01       	movw	r30, r28
    22a0:	ed 59       	subi	r30, 0x9D	; 157
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	82 95       	swap	r24
    22a8:	8f 70       	andi	r24, 0x0F	; 15
    22aa:	98 2f       	mov	r25, r24
    22ac:	91 70       	andi	r25, 0x01	; 1
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	63 e0       	ldi	r22, 0x03	; 3
    22b2:	49 2f       	mov	r20, r25
    22b4:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 5));
    22b8:	fe 01       	movw	r30, r28
    22ba:	ed 59       	subi	r30, 0x9D	; 157
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 81       	ld	r24, Z
    22c0:	82 95       	swap	r24
    22c2:	86 95       	lsr	r24
    22c4:	87 70       	andi	r24, 0x07	; 7
    22c6:	98 2f       	mov	r25, r24
    22c8:	91 70       	andi	r25, 0x01	; 1
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	64 e0       	ldi	r22, 0x04	; 4
    22ce:	49 2f       	mov	r20, r25
    22d0:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 6));
    22d4:	fe 01       	movw	r30, r28
    22d6:	ed 59       	subi	r30, 0x9D	; 157
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	80 81       	ld	r24, Z
    22dc:	82 95       	swap	r24
    22de:	86 95       	lsr	r24
    22e0:	86 95       	lsr	r24
    22e2:	83 70       	andi	r24, 0x03	; 3
    22e4:	98 2f       	mov	r25, r24
    22e6:	91 70       	andi	r25, 0x01	; 1
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	65 e0       	ldi	r22, 0x05	; 5
    22ec:	49 2f       	mov	r20, r25
    22ee:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 7));
    22f2:	fe 01       	movw	r30, r28
    22f4:	ed 59       	subi	r30, 0x9D	; 157
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	80 81       	ld	r24, Z
    22fa:	98 2f       	mov	r25, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	99 27       	eor	r25, r25
    2300:	99 1f       	adc	r25, r25
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	66 e0       	ldi	r22, 0x06	; 6
    2306:	49 2f       	mov	r20, r25
    2308:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    230c:	fe 01       	movw	r30, r28
    230e:	ed 5b       	subi	r30, 0xBD	; 189
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	a0 e8       	ldi	r26, 0x80	; 128
    2318:	bf e3       	ldi	r27, 0x3F	; 63
    231a:	80 83       	st	Z, r24
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	a2 83       	std	Z+2, r26	; 0x02
    2320:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2322:	8e 01       	movw	r16, r28
    2324:	01 5c       	subi	r16, 0xC1	; 193
    2326:	1f 4f       	sbci	r17, 0xFF	; 255
    2328:	fe 01       	movw	r30, r28
    232a:	ed 5b       	subi	r30, 0xBD	; 189
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	60 81       	ld	r22, Z
    2330:	71 81       	ldd	r23, Z+1	; 0x01
    2332:	82 81       	ldd	r24, Z+2	; 0x02
    2334:	93 81       	ldd	r25, Z+3	; 0x03
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4a e7       	ldi	r20, 0x7A	; 122
    233c:	55 e4       	ldi	r21, 0x45	; 69
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	f8 01       	movw	r30, r16
    2348:	80 83       	st	Z, r24
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	a2 83       	std	Z+2, r26	; 0x02
    234e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2350:	fe 01       	movw	r30, r28
    2352:	ff 96       	adiw	r30, 0x3f	; 63
    2354:	60 81       	ld	r22, Z
    2356:	71 81       	ldd	r23, Z+1	; 0x01
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	93 81       	ldd	r25, Z+3	; 0x03
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e8       	ldi	r20, 0x80	; 128
    2362:	5f e3       	ldi	r21, 0x3F	; 63
    2364:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2368:	88 23       	and	r24, r24
    236a:	2c f4       	brge	.+10     	; 0x2376 <LCD_sendCommand+0x3da>
		__ticks = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9e af       	std	Y+62, r25	; 0x3e
    2372:	8d af       	std	Y+61, r24	; 0x3d
    2374:	46 c0       	rjmp	.+140    	; 0x2402 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    2376:	fe 01       	movw	r30, r28
    2378:	ff 96       	adiw	r30, 0x3f	; 63
    237a:	60 81       	ld	r22, Z
    237c:	71 81       	ldd	r23, Z+1	; 0x01
    237e:	82 81       	ldd	r24, Z+2	; 0x02
    2380:	93 81       	ldd	r25, Z+3	; 0x03
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	3f ef       	ldi	r19, 0xFF	; 255
    2386:	4f e7       	ldi	r20, 0x7F	; 127
    2388:	57 e4       	ldi	r21, 0x47	; 71
    238a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    238e:	18 16       	cp	r1, r24
    2390:	64 f5       	brge	.+88     	; 0x23ea <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2392:	fe 01       	movw	r30, r28
    2394:	ed 5b       	subi	r30, 0xBD	; 189
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	60 81       	ld	r22, Z
    239a:	71 81       	ldd	r23, Z+1	; 0x01
    239c:	82 81       	ldd	r24, Z+2	; 0x02
    239e:	93 81       	ldd	r25, Z+3	; 0x03
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e2       	ldi	r20, 0x20	; 32
    23a6:	51 e4       	ldi	r21, 0x41	; 65
    23a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	bc 01       	movw	r22, r24
    23b2:	cd 01       	movw	r24, r26
    23b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	9e af       	std	Y+62, r25	; 0x3e
    23be:	8d af       	std	Y+61, r24	; 0x3d
    23c0:	0f c0       	rjmp	.+30     	; 0x23e0 <LCD_sendCommand+0x444>
    23c2:	80 e9       	ldi	r24, 0x90	; 144
    23c4:	91 e0       	ldi	r25, 0x01	; 1
    23c6:	9c af       	std	Y+60, r25	; 0x3c
    23c8:	8b af       	std	Y+59, r24	; 0x3b
    23ca:	8b ad       	ldd	r24, Y+59	; 0x3b
    23cc:	9c ad       	ldd	r25, Y+60	; 0x3c
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <LCD_sendCommand+0x432>
    23d2:	9c af       	std	Y+60, r25	; 0x3c
    23d4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    23d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	9e af       	std	Y+62, r25	; 0x3e
    23de:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    23e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	69 f7       	brne	.-38     	; 0x23c2 <LCD_sendCommand+0x426>
    23e8:	16 c0       	rjmp	.+44     	; 0x2416 <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ea:	fe 01       	movw	r30, r28
    23ec:	ff 96       	adiw	r30, 0x3f	; 63
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	9e af       	std	Y+62, r25	; 0x3e
    2400:	8d af       	std	Y+61, r24	; 0x3d
    2402:	8d ad       	ldd	r24, Y+61	; 0x3d
    2404:	9e ad       	ldd	r25, Y+62	; 0x3e
    2406:	9a af       	std	Y+58, r25	; 0x3a
    2408:	89 af       	std	Y+57, r24	; 0x39
    240a:	89 ad       	ldd	r24, Y+57	; 0x39
    240c:	9a ad       	ldd	r25, Y+58	; 0x3a
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <LCD_sendCommand+0x472>
    2412:	9a af       	std	Y+58, r25	; 0x3a
    2414:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	62 e0       	ldi	r22, 0x02	; 2
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	a0 e8       	ldi	r26, 0x80	; 128
    2426:	bf e3       	ldi	r27, 0x3F	; 63
    2428:	8d ab       	std	Y+53, r24	; 0x35
    242a:	9e ab       	std	Y+54, r25	; 0x36
    242c:	af ab       	std	Y+55, r26	; 0x37
    242e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2430:	6d a9       	ldd	r22, Y+53	; 0x35
    2432:	7e a9       	ldd	r23, Y+54	; 0x36
    2434:	8f a9       	ldd	r24, Y+55	; 0x37
    2436:	98 ad       	ldd	r25, Y+56	; 0x38
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	4a e7       	ldi	r20, 0x7A	; 122
    243e:	55 e4       	ldi	r21, 0x45	; 69
    2440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	89 ab       	std	Y+49, r24	; 0x31
    244a:	9a ab       	std	Y+50, r25	; 0x32
    244c:	ab ab       	std	Y+51, r26	; 0x33
    244e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2450:	69 a9       	ldd	r22, Y+49	; 0x31
    2452:	7a a9       	ldd	r23, Y+50	; 0x32
    2454:	8b a9       	ldd	r24, Y+51	; 0x33
    2456:	9c a9       	ldd	r25, Y+52	; 0x34
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e8       	ldi	r20, 0x80	; 128
    245e:	5f e3       	ldi	r21, 0x3F	; 63
    2460:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2464:	88 23       	and	r24, r24
    2466:	2c f4       	brge	.+10     	; 0x2472 <LCD_sendCommand+0x4d6>
		__ticks = 1;
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	98 ab       	std	Y+48, r25	; 0x30
    246e:	8f a7       	std	Y+47, r24	; 0x2f
    2470:	3f c0       	rjmp	.+126    	; 0x24f0 <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    2472:	69 a9       	ldd	r22, Y+49	; 0x31
    2474:	7a a9       	ldd	r23, Y+50	; 0x32
    2476:	8b a9       	ldd	r24, Y+51	; 0x33
    2478:	9c a9       	ldd	r25, Y+52	; 0x34
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	3f ef       	ldi	r19, 0xFF	; 255
    247e:	4f e7       	ldi	r20, 0x7F	; 127
    2480:	57 e4       	ldi	r21, 0x47	; 71
    2482:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2486:	18 16       	cp	r1, r24
    2488:	4c f5       	brge	.+82     	; 0x24dc <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248a:	6d a9       	ldd	r22, Y+53	; 0x35
    248c:	7e a9       	ldd	r23, Y+54	; 0x36
    248e:	8f a9       	ldd	r24, Y+55	; 0x37
    2490:	98 ad       	ldd	r25, Y+56	; 0x38
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e2       	ldi	r20, 0x20	; 32
    2498:	51 e4       	ldi	r21, 0x41	; 65
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	bc 01       	movw	r22, r24
    24a4:	cd 01       	movw	r24, r26
    24a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	98 ab       	std	Y+48, r25	; 0x30
    24b0:	8f a7       	std	Y+47, r24	; 0x2f
    24b2:	0f c0       	rjmp	.+30     	; 0x24d2 <LCD_sendCommand+0x536>
    24b4:	80 e9       	ldi	r24, 0x90	; 144
    24b6:	91 e0       	ldi	r25, 0x01	; 1
    24b8:	9e a7       	std	Y+46, r25	; 0x2e
    24ba:	8d a7       	std	Y+45, r24	; 0x2d
    24bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    24be:	9e a5       	ldd	r25, Y+46	; 0x2e
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <LCD_sendCommand+0x524>
    24c4:	9e a7       	std	Y+46, r25	; 0x2e
    24c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ca:	98 a9       	ldd	r25, Y+48	; 0x30
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	98 ab       	std	Y+48, r25	; 0x30
    24d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d4:	98 a9       	ldd	r25, Y+48	; 0x30
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	69 f7       	brne	.-38     	; 0x24b4 <LCD_sendCommand+0x518>
    24da:	14 c0       	rjmp	.+40     	; 0x2504 <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24dc:	69 a9       	ldd	r22, Y+49	; 0x31
    24de:	7a a9       	ldd	r23, Y+50	; 0x32
    24e0:	8b a9       	ldd	r24, Y+51	; 0x33
    24e2:	9c a9       	ldd	r25, Y+52	; 0x34
    24e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	98 ab       	std	Y+48, r25	; 0x30
    24ee:	8f a7       	std	Y+47, r24	; 0x2f
    24f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f2:	98 a9       	ldd	r25, Y+48	; 0x30
    24f4:	9c a7       	std	Y+44, r25	; 0x2c
    24f6:	8b a7       	std	Y+43, r24	; 0x2b
    24f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    24fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <LCD_sendCommand+0x560>
    2500:	9c a7       	std	Y+44, r25	; 0x2c
    2502:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	62 e0       	ldi	r22, 0x02	; 2
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a0 e8       	ldi	r26, 0x80	; 128
    2514:	bf e3       	ldi	r27, 0x3F	; 63
    2516:	8f a3       	std	Y+39, r24	; 0x27
    2518:	98 a7       	std	Y+40, r25	; 0x28
    251a:	a9 a7       	std	Y+41, r26	; 0x29
    251c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251e:	6f a1       	ldd	r22, Y+39	; 0x27
    2520:	78 a5       	ldd	r23, Y+40	; 0x28
    2522:	89 a5       	ldd	r24, Y+41	; 0x29
    2524:	9a a5       	ldd	r25, Y+42	; 0x2a
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4a e7       	ldi	r20, 0x7A	; 122
    252c:	55 e4       	ldi	r21, 0x45	; 69
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	8b a3       	std	Y+35, r24	; 0x23
    2538:	9c a3       	std	Y+36, r25	; 0x24
    253a:	ad a3       	std	Y+37, r26	; 0x25
    253c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    253e:	6b a1       	ldd	r22, Y+35	; 0x23
    2540:	7c a1       	ldd	r23, Y+36	; 0x24
    2542:	8d a1       	ldd	r24, Y+37	; 0x25
    2544:	9e a1       	ldd	r25, Y+38	; 0x26
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e8       	ldi	r20, 0x80	; 128
    254c:	5f e3       	ldi	r21, 0x3F	; 63
    254e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2552:	88 23       	and	r24, r24
    2554:	2c f4       	brge	.+10     	; 0x2560 <LCD_sendCommand+0x5c4>
		__ticks = 1;
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9a a3       	std	Y+34, r25	; 0x22
    255c:	89 a3       	std	Y+33, r24	; 0x21
    255e:	3f c0       	rjmp	.+126    	; 0x25de <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    2560:	6b a1       	ldd	r22, Y+35	; 0x23
    2562:	7c a1       	ldd	r23, Y+36	; 0x24
    2564:	8d a1       	ldd	r24, Y+37	; 0x25
    2566:	9e a1       	ldd	r25, Y+38	; 0x26
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	3f ef       	ldi	r19, 0xFF	; 255
    256c:	4f e7       	ldi	r20, 0x7F	; 127
    256e:	57 e4       	ldi	r21, 0x47	; 71
    2570:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2574:	18 16       	cp	r1, r24
    2576:	4c f5       	brge	.+82     	; 0x25ca <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2578:	6f a1       	ldd	r22, Y+39	; 0x27
    257a:	78 a5       	ldd	r23, Y+40	; 0x28
    257c:	89 a5       	ldd	r24, Y+41	; 0x29
    257e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e2       	ldi	r20, 0x20	; 32
    2586:	51 e4       	ldi	r21, 0x41	; 65
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	bc 01       	movw	r22, r24
    2592:	cd 01       	movw	r24, r26
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9a a3       	std	Y+34, r25	; 0x22
    259e:	89 a3       	std	Y+33, r24	; 0x21
    25a0:	0f c0       	rjmp	.+30     	; 0x25c0 <LCD_sendCommand+0x624>
    25a2:	80 e9       	ldi	r24, 0x90	; 144
    25a4:	91 e0       	ldi	r25, 0x01	; 1
    25a6:	98 a3       	std	Y+32, r25	; 0x20
    25a8:	8f 8f       	std	Y+31, r24	; 0x1f
    25aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ac:	98 a1       	ldd	r25, Y+32	; 0x20
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <LCD_sendCommand+0x612>
    25b2:	98 a3       	std	Y+32, r25	; 0x20
    25b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b6:	89 a1       	ldd	r24, Y+33	; 0x21
    25b8:	9a a1       	ldd	r25, Y+34	; 0x22
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	9a a3       	std	Y+34, r25	; 0x22
    25be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c0:	89 a1       	ldd	r24, Y+33	; 0x21
    25c2:	9a a1       	ldd	r25, Y+34	; 0x22
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	69 f7       	brne	.-38     	; 0x25a2 <LCD_sendCommand+0x606>
    25c8:	14 c0       	rjmp	.+40     	; 0x25f2 <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ca:	6b a1       	ldd	r22, Y+35	; 0x23
    25cc:	7c a1       	ldd	r23, Y+36	; 0x24
    25ce:	8d a1       	ldd	r24, Y+37	; 0x25
    25d0:	9e a1       	ldd	r25, Y+38	; 0x26
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	9a a3       	std	Y+34, r25	; 0x22
    25dc:	89 a3       	std	Y+33, r24	; 0x21
    25de:	89 a1       	ldd	r24, Y+33	; 0x21
    25e0:	9a a1       	ldd	r25, Y+34	; 0x22
    25e2:	9e 8f       	std	Y+30, r25	; 0x1e
    25e4:	8d 8f       	std	Y+29, r24	; 0x1d
    25e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <LCD_sendCommand+0x64e>
    25ee:	9e 8f       	std	Y+30, r25	; 0x1e
    25f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 0));
    25f2:	fe 01       	movw	r30, r28
    25f4:	ed 59       	subi	r30, 0x9D	; 157
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	80 81       	ld	r24, Z
    25fa:	98 2f       	mov	r25, r24
    25fc:	91 70       	andi	r25, 0x01	; 1
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	63 e0       	ldi	r22, 0x03	; 3
    2602:	49 2f       	mov	r20, r25
    2604:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 1));
    2608:	fe 01       	movw	r30, r28
    260a:	ed 59       	subi	r30, 0x9D	; 157
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
    2610:	86 95       	lsr	r24
    2612:	98 2f       	mov	r25, r24
    2614:	91 70       	andi	r25, 0x01	; 1
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	64 e0       	ldi	r22, 0x04	; 4
    261a:	49 2f       	mov	r20, r25
    261c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 2));
    2620:	fe 01       	movw	r30, r28
    2622:	ed 59       	subi	r30, 0x9D	; 157
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 81       	ld	r24, Z
    2628:	86 95       	lsr	r24
    262a:	86 95       	lsr	r24
    262c:	98 2f       	mov	r25, r24
    262e:	91 70       	andi	r25, 0x01	; 1
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	65 e0       	ldi	r22, 0x05	; 5
    2634:	49 2f       	mov	r20, r25
    2636:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 3));
    263a:	fe 01       	movw	r30, r28
    263c:	ed 59       	subi	r30, 0x9D	; 157
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 81       	ld	r24, Z
    2642:	86 95       	lsr	r24
    2644:	86 95       	lsr	r24
    2646:	86 95       	lsr	r24
    2648:	98 2f       	mov	r25, r24
    264a:	91 70       	andi	r25, 0x01	; 1
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	66 e0       	ldi	r22, 0x06	; 6
    2650:	49 2f       	mov	r20, r25
    2652:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	a0 e8       	ldi	r26, 0x80	; 128
    265c:	bf e3       	ldi	r27, 0x3F	; 63
    265e:	89 8f       	std	Y+25, r24	; 0x19
    2660:	9a 8f       	std	Y+26, r25	; 0x1a
    2662:	ab 8f       	std	Y+27, r26	; 0x1b
    2664:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2666:	69 8d       	ldd	r22, Y+25	; 0x19
    2668:	7a 8d       	ldd	r23, Y+26	; 0x1a
    266a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    266c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	4a e7       	ldi	r20, 0x7A	; 122
    2674:	55 e4       	ldi	r21, 0x45	; 69
    2676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	8d 8b       	std	Y+21, r24	; 0x15
    2680:	9e 8b       	std	Y+22, r25	; 0x16
    2682:	af 8b       	std	Y+23, r26	; 0x17
    2684:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2686:	6d 89       	ldd	r22, Y+21	; 0x15
    2688:	7e 89       	ldd	r23, Y+22	; 0x16
    268a:	8f 89       	ldd	r24, Y+23	; 0x17
    268c:	98 8d       	ldd	r25, Y+24	; 0x18
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e8       	ldi	r20, 0x80	; 128
    2694:	5f e3       	ldi	r21, 0x3F	; 63
    2696:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    269a:	88 23       	and	r24, r24
    269c:	2c f4       	brge	.+10     	; 0x26a8 <LCD_sendCommand+0x70c>
		__ticks = 1;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9c 8b       	std	Y+20, r25	; 0x14
    26a4:	8b 8b       	std	Y+19, r24	; 0x13
    26a6:	3f c0       	rjmp	.+126    	; 0x2726 <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    26a8:	6d 89       	ldd	r22, Y+21	; 0x15
    26aa:	7e 89       	ldd	r23, Y+22	; 0x16
    26ac:	8f 89       	ldd	r24, Y+23	; 0x17
    26ae:	98 8d       	ldd	r25, Y+24	; 0x18
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	3f ef       	ldi	r19, 0xFF	; 255
    26b4:	4f e7       	ldi	r20, 0x7F	; 127
    26b6:	57 e4       	ldi	r21, 0x47	; 71
    26b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26bc:	18 16       	cp	r1, r24
    26be:	4c f5       	brge	.+82     	; 0x2712 <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c0:	69 8d       	ldd	r22, Y+25	; 0x19
    26c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e2       	ldi	r20, 0x20	; 32
    26ce:	51 e4       	ldi	r21, 0x41	; 65
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	bc 01       	movw	r22, r24
    26da:	cd 01       	movw	r24, r26
    26dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	9c 8b       	std	Y+20, r25	; 0x14
    26e6:	8b 8b       	std	Y+19, r24	; 0x13
    26e8:	0f c0       	rjmp	.+30     	; 0x2708 <LCD_sendCommand+0x76c>
    26ea:	80 e9       	ldi	r24, 0x90	; 144
    26ec:	91 e0       	ldi	r25, 0x01	; 1
    26ee:	9a 8b       	std	Y+18, r25	; 0x12
    26f0:	89 8b       	std	Y+17, r24	; 0x11
    26f2:	89 89       	ldd	r24, Y+17	; 0x11
    26f4:	9a 89       	ldd	r25, Y+18	; 0x12
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <LCD_sendCommand+0x75a>
    26fa:	9a 8b       	std	Y+18, r25	; 0x12
    26fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2700:	9c 89       	ldd	r25, Y+20	; 0x14
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	9c 8b       	std	Y+20, r25	; 0x14
    2706:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2708:	8b 89       	ldd	r24, Y+19	; 0x13
    270a:	9c 89       	ldd	r25, Y+20	; 0x14
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	69 f7       	brne	.-38     	; 0x26ea <LCD_sendCommand+0x74e>
    2710:	14 c0       	rjmp	.+40     	; 0x273a <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2712:	6d 89       	ldd	r22, Y+21	; 0x15
    2714:	7e 89       	ldd	r23, Y+22	; 0x16
    2716:	8f 89       	ldd	r24, Y+23	; 0x17
    2718:	98 8d       	ldd	r25, Y+24	; 0x18
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	9c 8b       	std	Y+20, r25	; 0x14
    2724:	8b 8b       	std	Y+19, r24	; 0x13
    2726:	8b 89       	ldd	r24, Y+19	; 0x13
    2728:	9c 89       	ldd	r25, Y+20	; 0x14
    272a:	98 8b       	std	Y+16, r25	; 0x10
    272c:	8f 87       	std	Y+15, r24	; 0x0f
    272e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2730:	98 89       	ldd	r25, Y+16	; 0x10
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	f1 f7       	brne	.-4      	; 0x2732 <LCD_sendCommand+0x796>
    2736:	98 8b       	std	Y+16, r25	; 0x10
    2738:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	62 e0       	ldi	r22, 0x02	; 2
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	a0 e8       	ldi	r26, 0x80	; 128
    274a:	bf e3       	ldi	r27, 0x3F	; 63
    274c:	8b 87       	std	Y+11, r24	; 0x0b
    274e:	9c 87       	std	Y+12, r25	; 0x0c
    2750:	ad 87       	std	Y+13, r26	; 0x0d
    2752:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2754:	6b 85       	ldd	r22, Y+11	; 0x0b
    2756:	7c 85       	ldd	r23, Y+12	; 0x0c
    2758:	8d 85       	ldd	r24, Y+13	; 0x0d
    275a:	9e 85       	ldd	r25, Y+14	; 0x0e
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	4a e7       	ldi	r20, 0x7A	; 122
    2762:	55 e4       	ldi	r21, 0x45	; 69
    2764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	8f 83       	std	Y+7, r24	; 0x07
    276e:	98 87       	std	Y+8, r25	; 0x08
    2770:	a9 87       	std	Y+9, r26	; 0x09
    2772:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2774:	6f 81       	ldd	r22, Y+7	; 0x07
    2776:	78 85       	ldd	r23, Y+8	; 0x08
    2778:	89 85       	ldd	r24, Y+9	; 0x09
    277a:	9a 85       	ldd	r25, Y+10	; 0x0a
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e8       	ldi	r20, 0x80	; 128
    2782:	5f e3       	ldi	r21, 0x3F	; 63
    2784:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2788:	88 23       	and	r24, r24
    278a:	2c f4       	brge	.+10     	; 0x2796 <LCD_sendCommand+0x7fa>
		__ticks = 1;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	8d 83       	std	Y+5, r24	; 0x05
    2794:	3f c0       	rjmp	.+126    	; 0x2814 <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    2796:	6f 81       	ldd	r22, Y+7	; 0x07
    2798:	78 85       	ldd	r23, Y+8	; 0x08
    279a:	89 85       	ldd	r24, Y+9	; 0x09
    279c:	9a 85       	ldd	r25, Y+10	; 0x0a
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	3f ef       	ldi	r19, 0xFF	; 255
    27a2:	4f e7       	ldi	r20, 0x7F	; 127
    27a4:	57 e4       	ldi	r21, 0x47	; 71
    27a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27aa:	18 16       	cp	r1, r24
    27ac:	4c f5       	brge	.+82     	; 0x2800 <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e2       	ldi	r20, 0x20	; 32
    27bc:	51 e4       	ldi	r21, 0x41	; 65
    27be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	bc 01       	movw	r22, r24
    27c8:	cd 01       	movw	r24, r26
    27ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	9e 83       	std	Y+6, r25	; 0x06
    27d4:	8d 83       	std	Y+5, r24	; 0x05
    27d6:	0f c0       	rjmp	.+30     	; 0x27f6 <LCD_sendCommand+0x85a>
    27d8:	80 e9       	ldi	r24, 0x90	; 144
    27da:	91 e0       	ldi	r25, 0x01	; 1
    27dc:	9c 83       	std	Y+4, r25	; 0x04
    27de:	8b 83       	std	Y+3, r24	; 0x03
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	9c 81       	ldd	r25, Y+4	; 0x04
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <LCD_sendCommand+0x848>
    27e8:	9c 83       	std	Y+4, r25	; 0x04
    27ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ec:	8d 81       	ldd	r24, Y+5	; 0x05
    27ee:	9e 81       	ldd	r25, Y+6	; 0x06
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	9e 83       	std	Y+6, r25	; 0x06
    27f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f6:	8d 81       	ldd	r24, Y+5	; 0x05
    27f8:	9e 81       	ldd	r25, Y+6	; 0x06
    27fa:	00 97       	sbiw	r24, 0x00	; 0
    27fc:	69 f7       	brne	.-38     	; 0x27d8 <LCD_sendCommand+0x83c>
    27fe:	14 c0       	rjmp	.+40     	; 0x2828 <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2800:	6f 81       	ldd	r22, Y+7	; 0x07
    2802:	78 85       	ldd	r23, Y+8	; 0x08
    2804:	89 85       	ldd	r24, Y+9	; 0x09
    2806:	9a 85       	ldd	r25, Y+10	; 0x0a
    2808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	9a 83       	std	Y+2, r25	; 0x02
    281a:	89 83       	std	Y+1, r24	; 0x01
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	9a 81       	ldd	r25, Y+2	; 0x02
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <LCD_sendCommand+0x884>
    2824:	9a 83       	std	Y+2, r25	; 0x02
    2826:	89 83       	std	Y+1, r24	; 0x01
  GPIO_writePort(LCD_DATA_PORT_ID, command); /* out the required command to the data bus D0 --> D7 */
  _delay_ms(1); /* delay for processing Tdsw = 100ns */
  GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
  _delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2828:	cd 59       	subi	r28, 0x9D	; 157
    282a:	df 4f       	sbci	r29, 0xFF	; 255
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	1f 91       	pop	r17
    283c:	0f 91       	pop	r16
    283e:	08 95       	ret

00002840 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2840:	0f 93       	push	r16
    2842:	1f 93       	push	r17
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	c3 56       	subi	r28, 0x63	; 99
    284e:	d0 40       	sbci	r29, 0x00	; 0
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	de bf       	out	0x3e, r29	; 62
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	cd bf       	out	0x3d, r28	; 61
    285a:	fe 01       	movw	r30, r28
    285c:	ed 59       	subi	r30, 0x9D	; 157
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	80 83       	st	Z, r24
  GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	61 e0       	ldi	r22, 0x01	; 1
    2866:	41 e0       	ldi	r20, 0x01	; 1
    2868:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    286c:	fe 01       	movw	r30, r28
    286e:	e1 5a       	subi	r30, 0xA1	; 161
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	a0 e8       	ldi	r26, 0x80	; 128
    2878:	bf e3       	ldi	r27, 0x3F	; 63
    287a:	80 83       	st	Z, r24
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	a2 83       	std	Z+2, r26	; 0x02
    2880:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2882:	8e 01       	movw	r16, r28
    2884:	05 5a       	subi	r16, 0xA5	; 165
    2886:	1f 4f       	sbci	r17, 0xFF	; 255
    2888:	fe 01       	movw	r30, r28
    288a:	e1 5a       	subi	r30, 0xA1	; 161
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	60 81       	ld	r22, Z
    2890:	71 81       	ldd	r23, Z+1	; 0x01
    2892:	82 81       	ldd	r24, Z+2	; 0x02
    2894:	93 81       	ldd	r25, Z+3	; 0x03
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	4a e7       	ldi	r20, 0x7A	; 122
    289c:	55 e4       	ldi	r21, 0x45	; 69
    289e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	f8 01       	movw	r30, r16
    28a8:	80 83       	st	Z, r24
    28aa:	91 83       	std	Z+1, r25	; 0x01
    28ac:	a2 83       	std	Z+2, r26	; 0x02
    28ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28b0:	fe 01       	movw	r30, r28
    28b2:	e5 5a       	subi	r30, 0xA5	; 165
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	60 81       	ld	r22, Z
    28b8:	71 81       	ldd	r23, Z+1	; 0x01
    28ba:	82 81       	ldd	r24, Z+2	; 0x02
    28bc:	93 81       	ldd	r25, Z+3	; 0x03
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e8       	ldi	r20, 0x80	; 128
    28c4:	5f e3       	ldi	r21, 0x3F	; 63
    28c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ca:	88 23       	and	r24, r24
    28cc:	44 f4       	brge	.+16     	; 0x28de <LCD_displayCharacter+0x9e>
		__ticks = 1;
    28ce:	fe 01       	movw	r30, r28
    28d0:	e7 5a       	subi	r30, 0xA7	; 167
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	80 83       	st	Z, r24
    28dc:	64 c0       	rjmp	.+200    	; 0x29a6 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    28de:	fe 01       	movw	r30, r28
    28e0:	e5 5a       	subi	r30, 0xA5	; 165
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	60 81       	ld	r22, Z
    28e6:	71 81       	ldd	r23, Z+1	; 0x01
    28e8:	82 81       	ldd	r24, Z+2	; 0x02
    28ea:	93 81       	ldd	r25, Z+3	; 0x03
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	3f ef       	ldi	r19, 0xFF	; 255
    28f0:	4f e7       	ldi	r20, 0x7F	; 127
    28f2:	57 e4       	ldi	r21, 0x47	; 71
    28f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28f8:	18 16       	cp	r1, r24
    28fa:	0c f0       	brlt	.+2      	; 0x28fe <LCD_displayCharacter+0xbe>
    28fc:	43 c0       	rjmp	.+134    	; 0x2984 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fe:	fe 01       	movw	r30, r28
    2900:	e1 5a       	subi	r30, 0xA1	; 161
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	60 81       	ld	r22, Z
    2906:	71 81       	ldd	r23, Z+1	; 0x01
    2908:	82 81       	ldd	r24, Z+2	; 0x02
    290a:	93 81       	ldd	r25, Z+3	; 0x03
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e2       	ldi	r20, 0x20	; 32
    2912:	51 e4       	ldi	r21, 0x41	; 65
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	8e 01       	movw	r16, r28
    291e:	07 5a       	subi	r16, 0xA7	; 167
    2920:	1f 4f       	sbci	r17, 0xFF	; 255
    2922:	bc 01       	movw	r22, r24
    2924:	cd 01       	movw	r24, r26
    2926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	f8 01       	movw	r30, r16
    2930:	91 83       	std	Z+1, r25	; 0x01
    2932:	80 83       	st	Z, r24
    2934:	1f c0       	rjmp	.+62     	; 0x2974 <LCD_displayCharacter+0x134>
    2936:	fe 01       	movw	r30, r28
    2938:	e9 5a       	subi	r30, 0xA9	; 169
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	80 e9       	ldi	r24, 0x90	; 144
    293e:	91 e0       	ldi	r25, 0x01	; 1
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	80 83       	st	Z, r24
    2944:	fe 01       	movw	r30, r28
    2946:	e9 5a       	subi	r30, 0xA9	; 169
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 81       	ld	r24, Z
    294c:	91 81       	ldd	r25, Z+1	; 0x01
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	f1 f7       	brne	.-4      	; 0x294e <LCD_displayCharacter+0x10e>
    2952:	fe 01       	movw	r30, r28
    2954:	e9 5a       	subi	r30, 0xA9	; 169
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295c:	de 01       	movw	r26, r28
    295e:	a7 5a       	subi	r26, 0xA7	; 167
    2960:	bf 4f       	sbci	r27, 0xFF	; 255
    2962:	fe 01       	movw	r30, r28
    2964:	e7 5a       	subi	r30, 0xA7	; 167
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	91 81       	ldd	r25, Z+1	; 0x01
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	11 96       	adiw	r26, 0x01	; 1
    2970:	9c 93       	st	X, r25
    2972:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2974:	fe 01       	movw	r30, r28
    2976:	e7 5a       	subi	r30, 0xA7	; 167
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	80 81       	ld	r24, Z
    297c:	91 81       	ldd	r25, Z+1	; 0x01
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	d1 f6       	brne	.-76     	; 0x2936 <LCD_displayCharacter+0xf6>
    2982:	27 c0       	rjmp	.+78     	; 0x29d2 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2984:	8e 01       	movw	r16, r28
    2986:	07 5a       	subi	r16, 0xA7	; 167
    2988:	1f 4f       	sbci	r17, 0xFF	; 255
    298a:	fe 01       	movw	r30, r28
    298c:	e5 5a       	subi	r30, 0xA5	; 165
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	60 81       	ld	r22, Z
    2992:	71 81       	ldd	r23, Z+1	; 0x01
    2994:	82 81       	ldd	r24, Z+2	; 0x02
    2996:	93 81       	ldd	r25, Z+3	; 0x03
    2998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	f8 01       	movw	r30, r16
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	80 83       	st	Z, r24
    29a6:	de 01       	movw	r26, r28
    29a8:	ab 5a       	subi	r26, 0xAB	; 171
    29aa:	bf 4f       	sbci	r27, 0xFF	; 255
    29ac:	fe 01       	movw	r30, r28
    29ae:	e7 5a       	subi	r30, 0xA7	; 167
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	80 81       	ld	r24, Z
    29b4:	91 81       	ldd	r25, Z+1	; 0x01
    29b6:	8d 93       	st	X+, r24
    29b8:	9c 93       	st	X, r25
    29ba:	fe 01       	movw	r30, r28
    29bc:	eb 5a       	subi	r30, 0xAB	; 171
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	80 81       	ld	r24, Z
    29c2:	91 81       	ldd	r25, Z+1	; 0x01
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <LCD_displayCharacter+0x184>
    29c8:	fe 01       	movw	r30, r28
    29ca:	eb 5a       	subi	r30, 0xAB	; 171
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	80 83       	st	Z, r24
  _delay_ms(1); /* delay for processing Tas = 50ns */
  GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	62 e0       	ldi	r22, 0x02	; 2
    29d6:	41 e0       	ldi	r20, 0x01	; 1
    29d8:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    29dc:	fe 01       	movw	r30, r28
    29de:	ef 5a       	subi	r30, 0xAF	; 175
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	a0 e8       	ldi	r26, 0x80	; 128
    29e8:	bf e3       	ldi	r27, 0x3F	; 63
    29ea:	80 83       	st	Z, r24
    29ec:	91 83       	std	Z+1, r25	; 0x01
    29ee:	a2 83       	std	Z+2, r26	; 0x02
    29f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f2:	8e 01       	movw	r16, r28
    29f4:	03 5b       	subi	r16, 0xB3	; 179
    29f6:	1f 4f       	sbci	r17, 0xFF	; 255
    29f8:	fe 01       	movw	r30, r28
    29fa:	ef 5a       	subi	r30, 0xAF	; 175
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	60 81       	ld	r22, Z
    2a00:	71 81       	ldd	r23, Z+1	; 0x01
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	4a e7       	ldi	r20, 0x7A	; 122
    2a0c:	55 e4       	ldi	r21, 0x45	; 69
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	f8 01       	movw	r30, r16
    2a18:	80 83       	st	Z, r24
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	a2 83       	std	Z+2, r26	; 0x02
    2a1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a20:	fe 01       	movw	r30, r28
    2a22:	e3 5b       	subi	r30, 0xB3	; 179
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	60 81       	ld	r22, Z
    2a28:	71 81       	ldd	r23, Z+1	; 0x01
    2a2a:	82 81       	ldd	r24, Z+2	; 0x02
    2a2c:	93 81       	ldd	r25, Z+3	; 0x03
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e8       	ldi	r20, 0x80	; 128
    2a34:	5f e3       	ldi	r21, 0x3F	; 63
    2a36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a3a:	88 23       	and	r24, r24
    2a3c:	44 f4       	brge	.+16     	; 0x2a4e <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2a3e:	fe 01       	movw	r30, r28
    2a40:	e5 5b       	subi	r30, 0xB5	; 181
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	80 83       	st	Z, r24
    2a4c:	64 c0       	rjmp	.+200    	; 0x2b16 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e3 5b       	subi	r30, 0xB3	; 179
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	3f ef       	ldi	r19, 0xFF	; 255
    2a60:	4f e7       	ldi	r20, 0x7F	; 127
    2a62:	57 e4       	ldi	r21, 0x47	; 71
    2a64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a68:	18 16       	cp	r1, r24
    2a6a:	0c f0       	brlt	.+2      	; 0x2a6e <LCD_displayCharacter+0x22e>
    2a6c:	43 c0       	rjmp	.+134    	; 0x2af4 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6e:	fe 01       	movw	r30, r28
    2a70:	ef 5a       	subi	r30, 0xAF	; 175
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	60 81       	ld	r22, Z
    2a76:	71 81       	ldd	r23, Z+1	; 0x01
    2a78:	82 81       	ldd	r24, Z+2	; 0x02
    2a7a:	93 81       	ldd	r25, Z+3	; 0x03
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e2       	ldi	r20, 0x20	; 32
    2a82:	51 e4       	ldi	r21, 0x41	; 65
    2a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	8e 01       	movw	r16, r28
    2a8e:	05 5b       	subi	r16, 0xB5	; 181
    2a90:	1f 4f       	sbci	r17, 0xFF	; 255
    2a92:	bc 01       	movw	r22, r24
    2a94:	cd 01       	movw	r24, r26
    2a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	f8 01       	movw	r30, r16
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
    2aa4:	1f c0       	rjmp	.+62     	; 0x2ae4 <LCD_displayCharacter+0x2a4>
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	e7 5b       	subi	r30, 0xB7	; 183
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	80 e9       	ldi	r24, 0x90	; 144
    2aae:	91 e0       	ldi	r25, 0x01	; 1
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	80 83       	st	Z, r24
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	e7 5b       	subi	r30, 0xB7	; 183
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	80 81       	ld	r24, Z
    2abc:	91 81       	ldd	r25, Z+1	; 0x01
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <LCD_displayCharacter+0x27e>
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e7 5b       	subi	r30, 0xB7	; 183
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2acc:	de 01       	movw	r26, r28
    2ace:	a5 5b       	subi	r26, 0xB5	; 181
    2ad0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e5 5b       	subi	r30, 0xB5	; 181
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	80 81       	ld	r24, Z
    2ada:	91 81       	ldd	r25, Z+1	; 0x01
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	11 96       	adiw	r26, 0x01	; 1
    2ae0:	9c 93       	st	X, r25
    2ae2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	e5 5b       	subi	r30, 0xB5	; 181
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	80 81       	ld	r24, Z
    2aec:	91 81       	ldd	r25, Z+1	; 0x01
    2aee:	00 97       	sbiw	r24, 0x00	; 0
    2af0:	d1 f6       	brne	.-76     	; 0x2aa6 <LCD_displayCharacter+0x266>
    2af2:	27 c0       	rjmp	.+78     	; 0x2b42 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af4:	8e 01       	movw	r16, r28
    2af6:	05 5b       	subi	r16, 0xB5	; 181
    2af8:	1f 4f       	sbci	r17, 0xFF	; 255
    2afa:	fe 01       	movw	r30, r28
    2afc:	e3 5b       	subi	r30, 0xB3	; 179
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	60 81       	ld	r22, Z
    2b02:	71 81       	ldd	r23, Z+1	; 0x01
    2b04:	82 81       	ldd	r24, Z+2	; 0x02
    2b06:	93 81       	ldd	r25, Z+3	; 0x03
    2b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	f8 01       	movw	r30, r16
    2b12:	91 83       	std	Z+1, r25	; 0x01
    2b14:	80 83       	st	Z, r24
    2b16:	de 01       	movw	r26, r28
    2b18:	a9 5b       	subi	r26, 0xB9	; 185
    2b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	e5 5b       	subi	r30, 0xB5	; 181
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	80 81       	ld	r24, Z
    2b24:	91 81       	ldd	r25, Z+1	; 0x01
    2b26:	8d 93       	st	X+, r24
    2b28:	9c 93       	st	X, r25
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	e9 5b       	subi	r30, 0xB9	; 185
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 81       	ld	r24, Z
    2b32:	91 81       	ldd	r25, Z+1	; 0x01
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	f1 f7       	brne	.-4      	; 0x2b34 <LCD_displayCharacter+0x2f4>
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e9 5b       	subi	r30, 0xB9	; 185
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	91 83       	std	Z+1, r25	; 0x01
    2b40:	80 83       	st	Z, r24
  _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 4));
    2b42:	fe 01       	movw	r30, r28
    2b44:	ed 59       	subi	r30, 0x9D	; 157
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	80 81       	ld	r24, Z
    2b4a:	82 95       	swap	r24
    2b4c:	8f 70       	andi	r24, 0x0F	; 15
    2b4e:	98 2f       	mov	r25, r24
    2b50:	91 70       	andi	r25, 0x01	; 1
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	63 e0       	ldi	r22, 0x03	; 3
    2b56:	49 2f       	mov	r20, r25
    2b58:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 5));
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	ed 59       	subi	r30, 0x9D	; 157
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 81       	ld	r24, Z
    2b64:	82 95       	swap	r24
    2b66:	86 95       	lsr	r24
    2b68:	87 70       	andi	r24, 0x07	; 7
    2b6a:	98 2f       	mov	r25, r24
    2b6c:	91 70       	andi	r25, 0x01	; 1
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	64 e0       	ldi	r22, 0x04	; 4
    2b72:	49 2f       	mov	r20, r25
    2b74:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 6));
    2b78:	fe 01       	movw	r30, r28
    2b7a:	ed 59       	subi	r30, 0x9D	; 157
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 81       	ld	r24, Z
    2b80:	82 95       	swap	r24
    2b82:	86 95       	lsr	r24
    2b84:	86 95       	lsr	r24
    2b86:	83 70       	andi	r24, 0x03	; 3
    2b88:	98 2f       	mov	r25, r24
    2b8a:	91 70       	andi	r25, 0x01	; 1
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	65 e0       	ldi	r22, 0x05	; 5
    2b90:	49 2f       	mov	r20, r25
    2b92:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 7));
    2b96:	fe 01       	movw	r30, r28
    2b98:	ed 59       	subi	r30, 0x9D	; 157
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	80 81       	ld	r24, Z
    2b9e:	98 2f       	mov	r25, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	99 27       	eor	r25, r25
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	66 e0       	ldi	r22, 0x06	; 6
    2baa:	49 2f       	mov	r20, r25
    2bac:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	ed 5b       	subi	r30, 0xBD	; 189
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	a0 e8       	ldi	r26, 0x80	; 128
    2bbc:	bf e3       	ldi	r27, 0x3F	; 63
    2bbe:	80 83       	st	Z, r24
    2bc0:	91 83       	std	Z+1, r25	; 0x01
    2bc2:	a2 83       	std	Z+2, r26	; 0x02
    2bc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc6:	8e 01       	movw	r16, r28
    2bc8:	01 5c       	subi	r16, 0xC1	; 193
    2bca:	1f 4f       	sbci	r17, 0xFF	; 255
    2bcc:	fe 01       	movw	r30, r28
    2bce:	ed 5b       	subi	r30, 0xBD	; 189
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	60 81       	ld	r22, Z
    2bd4:	71 81       	ldd	r23, Z+1	; 0x01
    2bd6:	82 81       	ldd	r24, Z+2	; 0x02
    2bd8:	93 81       	ldd	r25, Z+3	; 0x03
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	4a e7       	ldi	r20, 0x7A	; 122
    2be0:	55 e4       	ldi	r21, 0x45	; 69
    2be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	f8 01       	movw	r30, r16
    2bec:	80 83       	st	Z, r24
    2bee:	91 83       	std	Z+1, r25	; 0x01
    2bf0:	a2 83       	std	Z+2, r26	; 0x02
    2bf2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	ff 96       	adiw	r30, 0x3f	; 63
    2bf8:	60 81       	ld	r22, Z
    2bfa:	71 81       	ldd	r23, Z+1	; 0x01
    2bfc:	82 81       	ldd	r24, Z+2	; 0x02
    2bfe:	93 81       	ldd	r25, Z+3	; 0x03
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	40 e8       	ldi	r20, 0x80	; 128
    2c06:	5f e3       	ldi	r21, 0x3F	; 63
    2c08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c0c:	88 23       	and	r24, r24
    2c0e:	2c f4       	brge	.+10     	; 0x2c1a <LCD_displayCharacter+0x3da>
		__ticks = 1;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	9e af       	std	Y+62, r25	; 0x3e
    2c16:	8d af       	std	Y+61, r24	; 0x3d
    2c18:	46 c0       	rjmp	.+140    	; 0x2ca6 <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	ff 96       	adiw	r30, 0x3f	; 63
    2c1e:	60 81       	ld	r22, Z
    2c20:	71 81       	ldd	r23, Z+1	; 0x01
    2c22:	82 81       	ldd	r24, Z+2	; 0x02
    2c24:	93 81       	ldd	r25, Z+3	; 0x03
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	3f ef       	ldi	r19, 0xFF	; 255
    2c2a:	4f e7       	ldi	r20, 0x7F	; 127
    2c2c:	57 e4       	ldi	r21, 0x47	; 71
    2c2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c32:	18 16       	cp	r1, r24
    2c34:	64 f5       	brge	.+88     	; 0x2c8e <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c36:	fe 01       	movw	r30, r28
    2c38:	ed 5b       	subi	r30, 0xBD	; 189
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	60 81       	ld	r22, Z
    2c3e:	71 81       	ldd	r23, Z+1	; 0x01
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e2       	ldi	r20, 0x20	; 32
    2c4a:	51 e4       	ldi	r21, 0x41	; 65
    2c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	bc 01       	movw	r22, r24
    2c56:	cd 01       	movw	r24, r26
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	9e af       	std	Y+62, r25	; 0x3e
    2c62:	8d af       	std	Y+61, r24	; 0x3d
    2c64:	0f c0       	rjmp	.+30     	; 0x2c84 <LCD_displayCharacter+0x444>
    2c66:	80 e9       	ldi	r24, 0x90	; 144
    2c68:	91 e0       	ldi	r25, 0x01	; 1
    2c6a:	9c af       	std	Y+60, r25	; 0x3c
    2c6c:	8b af       	std	Y+59, r24	; 0x3b
    2c6e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c70:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	f1 f7       	brne	.-4      	; 0x2c72 <LCD_displayCharacter+0x432>
    2c76:	9c af       	std	Y+60, r25	; 0x3c
    2c78:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	9e af       	std	Y+62, r25	; 0x3e
    2c82:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c84:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c86:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	69 f7       	brne	.-38     	; 0x2c66 <LCD_displayCharacter+0x426>
    2c8c:	16 c0       	rjmp	.+44     	; 0x2cba <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8e:	fe 01       	movw	r30, r28
    2c90:	ff 96       	adiw	r30, 0x3f	; 63
    2c92:	60 81       	ld	r22, Z
    2c94:	71 81       	ldd	r23, Z+1	; 0x01
    2c96:	82 81       	ldd	r24, Z+2	; 0x02
    2c98:	93 81       	ldd	r25, Z+3	; 0x03
    2c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	9e af       	std	Y+62, r25	; 0x3e
    2ca4:	8d af       	std	Y+61, r24	; 0x3d
    2ca6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ca8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2caa:	9a af       	std	Y+58, r25	; 0x3a
    2cac:	89 af       	std	Y+57, r24	; 0x39
    2cae:	89 ad       	ldd	r24, Y+57	; 0x39
    2cb0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	f1 f7       	brne	.-4      	; 0x2cb2 <LCD_displayCharacter+0x472>
    2cb6:	9a af       	std	Y+58, r25	; 0x3a
    2cb8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	62 e0       	ldi	r22, 0x02	; 2
    2cbe:	40 e0       	ldi	r20, 0x00	; 0
    2cc0:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	a0 e8       	ldi	r26, 0x80	; 128
    2cca:	bf e3       	ldi	r27, 0x3F	; 63
    2ccc:	8d ab       	std	Y+53, r24	; 0x35
    2cce:	9e ab       	std	Y+54, r25	; 0x36
    2cd0:	af ab       	std	Y+55, r26	; 0x37
    2cd2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd4:	6d a9       	ldd	r22, Y+53	; 0x35
    2cd6:	7e a9       	ldd	r23, Y+54	; 0x36
    2cd8:	8f a9       	ldd	r24, Y+55	; 0x37
    2cda:	98 ad       	ldd	r25, Y+56	; 0x38
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	4a e7       	ldi	r20, 0x7A	; 122
    2ce2:	55 e4       	ldi	r21, 0x45	; 69
    2ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	89 ab       	std	Y+49, r24	; 0x31
    2cee:	9a ab       	std	Y+50, r25	; 0x32
    2cf0:	ab ab       	std	Y+51, r26	; 0x33
    2cf2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cf4:	69 a9       	ldd	r22, Y+49	; 0x31
    2cf6:	7a a9       	ldd	r23, Y+50	; 0x32
    2cf8:	8b a9       	ldd	r24, Y+51	; 0x33
    2cfa:	9c a9       	ldd	r25, Y+52	; 0x34
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e8       	ldi	r20, 0x80	; 128
    2d02:	5f e3       	ldi	r21, 0x3F	; 63
    2d04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d08:	88 23       	and	r24, r24
    2d0a:	2c f4       	brge	.+10     	; 0x2d16 <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	98 ab       	std	Y+48, r25	; 0x30
    2d12:	8f a7       	std	Y+47, r24	; 0x2f
    2d14:	3f c0       	rjmp	.+126    	; 0x2d94 <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    2d16:	69 a9       	ldd	r22, Y+49	; 0x31
    2d18:	7a a9       	ldd	r23, Y+50	; 0x32
    2d1a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d1c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	3f ef       	ldi	r19, 0xFF	; 255
    2d22:	4f e7       	ldi	r20, 0x7F	; 127
    2d24:	57 e4       	ldi	r21, 0x47	; 71
    2d26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d2a:	18 16       	cp	r1, r24
    2d2c:	4c f5       	brge	.+82     	; 0x2d80 <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2e:	6d a9       	ldd	r22, Y+53	; 0x35
    2d30:	7e a9       	ldd	r23, Y+54	; 0x36
    2d32:	8f a9       	ldd	r24, Y+55	; 0x37
    2d34:	98 ad       	ldd	r25, Y+56	; 0x38
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e2       	ldi	r20, 0x20	; 32
    2d3c:	51 e4       	ldi	r21, 0x41	; 65
    2d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	bc 01       	movw	r22, r24
    2d48:	cd 01       	movw	r24, r26
    2d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	98 ab       	std	Y+48, r25	; 0x30
    2d54:	8f a7       	std	Y+47, r24	; 0x2f
    2d56:	0f c0       	rjmp	.+30     	; 0x2d76 <LCD_displayCharacter+0x536>
    2d58:	80 e9       	ldi	r24, 0x90	; 144
    2d5a:	91 e0       	ldi	r25, 0x01	; 1
    2d5c:	9e a7       	std	Y+46, r25	; 0x2e
    2d5e:	8d a7       	std	Y+45, r24	; 0x2d
    2d60:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d62:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	f1 f7       	brne	.-4      	; 0x2d64 <LCD_displayCharacter+0x524>
    2d68:	9e a7       	std	Y+46, r25	; 0x2e
    2d6a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d6e:	98 a9       	ldd	r25, Y+48	; 0x30
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	98 ab       	std	Y+48, r25	; 0x30
    2d74:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d76:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d78:	98 a9       	ldd	r25, Y+48	; 0x30
    2d7a:	00 97       	sbiw	r24, 0x00	; 0
    2d7c:	69 f7       	brne	.-38     	; 0x2d58 <LCD_displayCharacter+0x518>
    2d7e:	14 c0       	rjmp	.+40     	; 0x2da8 <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d80:	69 a9       	ldd	r22, Y+49	; 0x31
    2d82:	7a a9       	ldd	r23, Y+50	; 0x32
    2d84:	8b a9       	ldd	r24, Y+51	; 0x33
    2d86:	9c a9       	ldd	r25, Y+52	; 0x34
    2d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	98 ab       	std	Y+48, r25	; 0x30
    2d92:	8f a7       	std	Y+47, r24	; 0x2f
    2d94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d96:	98 a9       	ldd	r25, Y+48	; 0x30
    2d98:	9c a7       	std	Y+44, r25	; 0x2c
    2d9a:	8b a7       	std	Y+43, r24	; 0x2b
    2d9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	f1 f7       	brne	.-4      	; 0x2da0 <LCD_displayCharacter+0x560>
    2da4:	9c a7       	std	Y+44, r25	; 0x2c
    2da6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	62 e0       	ldi	r22, 0x02	; 2
    2dac:	41 e0       	ldi	r20, 0x01	; 1
    2dae:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	a0 e8       	ldi	r26, 0x80	; 128
    2db8:	bf e3       	ldi	r27, 0x3F	; 63
    2dba:	8f a3       	std	Y+39, r24	; 0x27
    2dbc:	98 a7       	std	Y+40, r25	; 0x28
    2dbe:	a9 a7       	std	Y+41, r26	; 0x29
    2dc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc2:	6f a1       	ldd	r22, Y+39	; 0x27
    2dc4:	78 a5       	ldd	r23, Y+40	; 0x28
    2dc6:	89 a5       	ldd	r24, Y+41	; 0x29
    2dc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	4a e7       	ldi	r20, 0x7A	; 122
    2dd0:	55 e4       	ldi	r21, 0x45	; 69
    2dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	8b a3       	std	Y+35, r24	; 0x23
    2ddc:	9c a3       	std	Y+36, r25	; 0x24
    2dde:	ad a3       	std	Y+37, r26	; 0x25
    2de0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2de2:	6b a1       	ldd	r22, Y+35	; 0x23
    2de4:	7c a1       	ldd	r23, Y+36	; 0x24
    2de6:	8d a1       	ldd	r24, Y+37	; 0x25
    2de8:	9e a1       	ldd	r25, Y+38	; 0x26
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	40 e8       	ldi	r20, 0x80	; 128
    2df0:	5f e3       	ldi	r21, 0x3F	; 63
    2df2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df6:	88 23       	and	r24, r24
    2df8:	2c f4       	brge	.+10     	; 0x2e04 <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	9a a3       	std	Y+34, r25	; 0x22
    2e00:	89 a3       	std	Y+33, r24	; 0x21
    2e02:	3f c0       	rjmp	.+126    	; 0x2e82 <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    2e04:	6b a1       	ldd	r22, Y+35	; 0x23
    2e06:	7c a1       	ldd	r23, Y+36	; 0x24
    2e08:	8d a1       	ldd	r24, Y+37	; 0x25
    2e0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	3f ef       	ldi	r19, 0xFF	; 255
    2e10:	4f e7       	ldi	r20, 0x7F	; 127
    2e12:	57 e4       	ldi	r21, 0x47	; 71
    2e14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e18:	18 16       	cp	r1, r24
    2e1a:	4c f5       	brge	.+82     	; 0x2e6e <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e1c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e1e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e20:	89 a5       	ldd	r24, Y+41	; 0x29
    2e22:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e2       	ldi	r20, 0x20	; 32
    2e2a:	51 e4       	ldi	r21, 0x41	; 65
    2e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	bc 01       	movw	r22, r24
    2e36:	cd 01       	movw	r24, r26
    2e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	9a a3       	std	Y+34, r25	; 0x22
    2e42:	89 a3       	std	Y+33, r24	; 0x21
    2e44:	0f c0       	rjmp	.+30     	; 0x2e64 <LCD_displayCharacter+0x624>
    2e46:	80 e9       	ldi	r24, 0x90	; 144
    2e48:	91 e0       	ldi	r25, 0x01	; 1
    2e4a:	98 a3       	std	Y+32, r25	; 0x20
    2e4c:	8f 8f       	std	Y+31, r24	; 0x1f
    2e4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e50:	98 a1       	ldd	r25, Y+32	; 0x20
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	f1 f7       	brne	.-4      	; 0x2e52 <LCD_displayCharacter+0x612>
    2e56:	98 a3       	std	Y+32, r25	; 0x20
    2e58:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	9a a3       	std	Y+34, r25	; 0x22
    2e62:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e64:	89 a1       	ldd	r24, Y+33	; 0x21
    2e66:	9a a1       	ldd	r25, Y+34	; 0x22
    2e68:	00 97       	sbiw	r24, 0x00	; 0
    2e6a:	69 f7       	brne	.-38     	; 0x2e46 <LCD_displayCharacter+0x606>
    2e6c:	14 c0       	rjmp	.+40     	; 0x2e96 <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e6e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e70:	7c a1       	ldd	r23, Y+36	; 0x24
    2e72:	8d a1       	ldd	r24, Y+37	; 0x25
    2e74:	9e a1       	ldd	r25, Y+38	; 0x26
    2e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	9a a3       	std	Y+34, r25	; 0x22
    2e80:	89 a3       	std	Y+33, r24	; 0x21
    2e82:	89 a1       	ldd	r24, Y+33	; 0x21
    2e84:	9a a1       	ldd	r25, Y+34	; 0x22
    2e86:	9e 8f       	std	Y+30, r25	; 0x1e
    2e88:	8d 8f       	std	Y+29, r24	; 0x1d
    2e8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <LCD_displayCharacter+0x64e>
    2e92:	9e 8f       	std	Y+30, r25	; 0x1e
    2e94:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 0));
    2e96:	fe 01       	movw	r30, r28
    2e98:	ed 59       	subi	r30, 0x9D	; 157
    2e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9c:	80 81       	ld	r24, Z
    2e9e:	98 2f       	mov	r25, r24
    2ea0:	91 70       	andi	r25, 0x01	; 1
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	63 e0       	ldi	r22, 0x03	; 3
    2ea6:	49 2f       	mov	r20, r25
    2ea8:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 1));
    2eac:	fe 01       	movw	r30, r28
    2eae:	ed 59       	subi	r30, 0x9D	; 157
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	80 81       	ld	r24, Z
    2eb4:	86 95       	lsr	r24
    2eb6:	98 2f       	mov	r25, r24
    2eb8:	91 70       	andi	r25, 0x01	; 1
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	64 e0       	ldi	r22, 0x04	; 4
    2ebe:	49 2f       	mov	r20, r25
    2ec0:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 2));
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ed 59       	subi	r30, 0x9D	; 157
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	80 81       	ld	r24, Z
    2ecc:	86 95       	lsr	r24
    2ece:	86 95       	lsr	r24
    2ed0:	98 2f       	mov	r25, r24
    2ed2:	91 70       	andi	r25, 0x01	; 1
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	65 e0       	ldi	r22, 0x05	; 5
    2ed8:	49 2f       	mov	r20, r25
    2eda:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 3));
    2ede:	fe 01       	movw	r30, r28
    2ee0:	ed 59       	subi	r30, 0x9D	; 157
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	80 81       	ld	r24, Z
    2ee6:	86 95       	lsr	r24
    2ee8:	86 95       	lsr	r24
    2eea:	86 95       	lsr	r24
    2eec:	98 2f       	mov	r25, r24
    2eee:	91 70       	andi	r25, 0x01	; 1
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	66 e0       	ldi	r22, 0x06	; 6
    2ef4:	49 2f       	mov	r20, r25
    2ef6:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	a0 e8       	ldi	r26, 0x80	; 128
    2f00:	bf e3       	ldi	r27, 0x3F	; 63
    2f02:	89 8f       	std	Y+25, r24	; 0x19
    2f04:	9a 8f       	std	Y+26, r25	; 0x1a
    2f06:	ab 8f       	std	Y+27, r26	; 0x1b
    2f08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	4a e7       	ldi	r20, 0x7A	; 122
    2f18:	55 e4       	ldi	r21, 0x45	; 69
    2f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	8d 8b       	std	Y+21, r24	; 0x15
    2f24:	9e 8b       	std	Y+22, r25	; 0x16
    2f26:	af 8b       	std	Y+23, r26	; 0x17
    2f28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f30:	98 8d       	ldd	r25, Y+24	; 0x18
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e8       	ldi	r20, 0x80	; 128
    2f38:	5f e3       	ldi	r21, 0x3F	; 63
    2f3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f3e:	88 23       	and	r24, r24
    2f40:	2c f4       	brge	.+10     	; 0x2f4c <LCD_displayCharacter+0x70c>
		__ticks = 1;
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	9c 8b       	std	Y+20, r25	; 0x14
    2f48:	8b 8b       	std	Y+19, r24	; 0x13
    2f4a:	3f c0       	rjmp	.+126    	; 0x2fca <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    2f4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f50:	8f 89       	ldd	r24, Y+23	; 0x17
    2f52:	98 8d       	ldd	r25, Y+24	; 0x18
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	3f ef       	ldi	r19, 0xFF	; 255
    2f58:	4f e7       	ldi	r20, 0x7F	; 127
    2f5a:	57 e4       	ldi	r21, 0x47	; 71
    2f5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f60:	18 16       	cp	r1, r24
    2f62:	4c f5       	brge	.+82     	; 0x2fb6 <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f64:	69 8d       	ldd	r22, Y+25	; 0x19
    2f66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e2       	ldi	r20, 0x20	; 32
    2f72:	51 e4       	ldi	r21, 0x41	; 65
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	cd 01       	movw	r24, r26
    2f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	9c 8b       	std	Y+20, r25	; 0x14
    2f8a:	8b 8b       	std	Y+19, r24	; 0x13
    2f8c:	0f c0       	rjmp	.+30     	; 0x2fac <LCD_displayCharacter+0x76c>
    2f8e:	80 e9       	ldi	r24, 0x90	; 144
    2f90:	91 e0       	ldi	r25, 0x01	; 1
    2f92:	9a 8b       	std	Y+18, r25	; 0x12
    2f94:	89 8b       	std	Y+17, r24	; 0x11
    2f96:	89 89       	ldd	r24, Y+17	; 0x11
    2f98:	9a 89       	ldd	r25, Y+18	; 0x12
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <LCD_displayCharacter+0x75a>
    2f9e:	9a 8b       	std	Y+18, r25	; 0x12
    2fa0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	9c 8b       	std	Y+20, r25	; 0x14
    2faa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fac:	8b 89       	ldd	r24, Y+19	; 0x13
    2fae:	9c 89       	ldd	r25, Y+20	; 0x14
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	69 f7       	brne	.-38     	; 0x2f8e <LCD_displayCharacter+0x74e>
    2fb4:	14 c0       	rjmp	.+40     	; 0x2fde <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2fba:	8f 89       	ldd	r24, Y+23	; 0x17
    2fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	9c 8b       	std	Y+20, r25	; 0x14
    2fc8:	8b 8b       	std	Y+19, r24	; 0x13
    2fca:	8b 89       	ldd	r24, Y+19	; 0x13
    2fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fce:	98 8b       	std	Y+16, r25	; 0x10
    2fd0:	8f 87       	std	Y+15, r24	; 0x0f
    2fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fd4:	98 89       	ldd	r25, Y+16	; 0x10
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	f1 f7       	brne	.-4      	; 0x2fd6 <LCD_displayCharacter+0x796>
    2fda:	98 8b       	std	Y+16, r25	; 0x10
    2fdc:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	62 e0       	ldi	r22, 0x02	; 2
    2fe2:	40 e0       	ldi	r20, 0x00	; 0
    2fe4:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	a0 e8       	ldi	r26, 0x80	; 128
    2fee:	bf e3       	ldi	r27, 0x3F	; 63
    2ff0:	8b 87       	std	Y+11, r24	; 0x0b
    2ff2:	9c 87       	std	Y+12, r25	; 0x0c
    2ff4:	ad 87       	std	Y+13, r26	; 0x0d
    2ff6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	4a e7       	ldi	r20, 0x7A	; 122
    3006:	55 e4       	ldi	r21, 0x45	; 69
    3008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	8f 83       	std	Y+7, r24	; 0x07
    3012:	98 87       	std	Y+8, r25	; 0x08
    3014:	a9 87       	std	Y+9, r26	; 0x09
    3016:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3018:	6f 81       	ldd	r22, Y+7	; 0x07
    301a:	78 85       	ldd	r23, Y+8	; 0x08
    301c:	89 85       	ldd	r24, Y+9	; 0x09
    301e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	40 e8       	ldi	r20, 0x80	; 128
    3026:	5f e3       	ldi	r21, 0x3F	; 63
    3028:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    302c:	88 23       	and	r24, r24
    302e:	2c f4       	brge	.+10     	; 0x303a <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	9e 83       	std	Y+6, r25	; 0x06
    3036:	8d 83       	std	Y+5, r24	; 0x05
    3038:	3f c0       	rjmp	.+126    	; 0x30b8 <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    303a:	6f 81       	ldd	r22, Y+7	; 0x07
    303c:	78 85       	ldd	r23, Y+8	; 0x08
    303e:	89 85       	ldd	r24, Y+9	; 0x09
    3040:	9a 85       	ldd	r25, Y+10	; 0x0a
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	3f ef       	ldi	r19, 0xFF	; 255
    3046:	4f e7       	ldi	r20, 0x7F	; 127
    3048:	57 e4       	ldi	r21, 0x47	; 71
    304a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    304e:	18 16       	cp	r1, r24
    3050:	4c f5       	brge	.+82     	; 0x30a4 <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3052:	6b 85       	ldd	r22, Y+11	; 0x0b
    3054:	7c 85       	ldd	r23, Y+12	; 0x0c
    3056:	8d 85       	ldd	r24, Y+13	; 0x0d
    3058:	9e 85       	ldd	r25, Y+14	; 0x0e
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e2       	ldi	r20, 0x20	; 32
    3060:	51 e4       	ldi	r21, 0x41	; 65
    3062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	bc 01       	movw	r22, r24
    306c:	cd 01       	movw	r24, r26
    306e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	9e 83       	std	Y+6, r25	; 0x06
    3078:	8d 83       	std	Y+5, r24	; 0x05
    307a:	0f c0       	rjmp	.+30     	; 0x309a <LCD_displayCharacter+0x85a>
    307c:	80 e9       	ldi	r24, 0x90	; 144
    307e:	91 e0       	ldi	r25, 0x01	; 1
    3080:	9c 83       	std	Y+4, r25	; 0x04
    3082:	8b 83       	std	Y+3, r24	; 0x03
    3084:	8b 81       	ldd	r24, Y+3	; 0x03
    3086:	9c 81       	ldd	r25, Y+4	; 0x04
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <LCD_displayCharacter+0x848>
    308c:	9c 83       	std	Y+4, r25	; 0x04
    308e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3090:	8d 81       	ldd	r24, Y+5	; 0x05
    3092:	9e 81       	ldd	r25, Y+6	; 0x06
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	9e 83       	std	Y+6, r25	; 0x06
    3098:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309a:	8d 81       	ldd	r24, Y+5	; 0x05
    309c:	9e 81       	ldd	r25, Y+6	; 0x06
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	69 f7       	brne	.-38     	; 0x307c <LCD_displayCharacter+0x83c>
    30a2:	14 c0       	rjmp	.+40     	; 0x30cc <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a4:	6f 81       	ldd	r22, Y+7	; 0x07
    30a6:	78 85       	ldd	r23, Y+8	; 0x08
    30a8:	89 85       	ldd	r24, Y+9	; 0x09
    30aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
    30b8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ba:	9e 81       	ldd	r25, Y+6	; 0x06
    30bc:	9a 83       	std	Y+2, r25	; 0x02
    30be:	89 83       	std	Y+1, r24	; 0x01
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	9a 81       	ldd	r25, Y+2	; 0x02
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	f1 f7       	brne	.-4      	; 0x30c4 <LCD_displayCharacter+0x884>
    30c8:	9a 83       	std	Y+2, r25	; 0x02
    30ca:	89 83       	std	Y+1, r24	; 0x01
  GPIO_writePort(LCD_DATA_PORT_ID, data); /* out the required command to the data bus D0 --> D7 */
  _delay_ms(1); /* delay for processing Tdsw = 100ns */
  GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
  _delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    30cc:	cd 59       	subi	r28, 0x9D	; 157
    30ce:	df 4f       	sbci	r29, 0xFF	; 255
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	de bf       	out	0x3e, r29	; 62
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	cd bf       	out	0x3d, r28	; 61
    30da:	cf 91       	pop	r28
    30dc:	df 91       	pop	r29
    30de:	1f 91       	pop	r17
    30e0:	0f 91       	pop	r16
    30e2:	08 95       	ret

000030e4 <LCD_displayString>:
 * Description: Displays a string on the LCD.
 *
 * @param Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
    30e4:	df 93       	push	r29
    30e6:	cf 93       	push	r28
    30e8:	00 d0       	rcall	.+0      	; 0x30ea <LCD_displayString+0x6>
    30ea:	0f 92       	push	r0
    30ec:	cd b7       	in	r28, 0x3d	; 61
    30ee:	de b7       	in	r29, 0x3e	; 62
    30f0:	9b 83       	std	Y+3, r25	; 0x03
    30f2:	8a 83       	std	Y+2, r24	; 0x02
  uint8 i = 0;
    30f4:	19 82       	std	Y+1, r1	; 0x01
    30f6:	0e c0       	rjmp	.+28     	; 0x3114 <LCD_displayString+0x30>
  while (Str[i] != '\0')
    {
      LCD_displayCharacter(Str[i]);
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
    30fa:	28 2f       	mov	r18, r24
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3100:	9b 81       	ldd	r25, Y+3	; 0x03
    3102:	fc 01       	movw	r30, r24
    3104:	e2 0f       	add	r30, r18
    3106:	f3 1f       	adc	r31, r19
    3108:	80 81       	ld	r24, Z
    310a:	0e 94 20 14 	call	0x2840	; 0x2840 <LCD_displayCharacter>
      i++;
    310e:	89 81       	ldd	r24, Y+1	; 0x01
    3110:	8f 5f       	subi	r24, 0xFF	; 255
    3112:	89 83       	std	Y+1, r24	; 0x01
 * @param Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
  uint8 i = 0;
  while (Str[i] != '\0')
    3114:	89 81       	ldd	r24, Y+1	; 0x01
    3116:	28 2f       	mov	r18, r24
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	8a 81       	ldd	r24, Y+2	; 0x02
    311c:	9b 81       	ldd	r25, Y+3	; 0x03
    311e:	fc 01       	movw	r30, r24
    3120:	e2 0f       	add	r30, r18
    3122:	f3 1f       	adc	r31, r19
    3124:	80 81       	ld	r24, Z
    3126:	88 23       	and	r24, r24
    3128:	39 f7       	brne	.-50     	; 0x30f8 <LCD_displayString+0x14>
   {
   LCD_displayCharacter(*Str);
   Str++;
   }
   *********************************************************/
}
    312a:	0f 90       	pop	r0
    312c:	0f 90       	pop	r0
    312e:	0f 90       	pop	r0
    3130:	cf 91       	pop	r28
    3132:	df 91       	pop	r29
    3134:	08 95       	ret

00003136 <LCD_moveCursor>:
 *
 * @param row: The row index (0 or 1).
 * @param col: The column index (0 to 15).
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    3136:	df 93       	push	r29
    3138:	cf 93       	push	r28
    313a:	00 d0       	rcall	.+0      	; 0x313c <LCD_moveCursor+0x6>
    313c:	00 d0       	rcall	.+0      	; 0x313e <LCD_moveCursor+0x8>
    313e:	0f 92       	push	r0
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
    3144:	8a 83       	std	Y+2, r24	; 0x02
    3146:	6b 83       	std	Y+3, r22	; 0x03
  uint8 lcd_memory_address;

  /* Calculate the required address in the LCD DDRAM */
  switch (row)
    3148:	8a 81       	ldd	r24, Y+2	; 0x02
    314a:	28 2f       	mov	r18, r24
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	3d 83       	std	Y+5, r19	; 0x05
    3150:	2c 83       	std	Y+4, r18	; 0x04
    3152:	8c 81       	ldd	r24, Y+4	; 0x04
    3154:	9d 81       	ldd	r25, Y+5	; 0x05
    3156:	81 30       	cpi	r24, 0x01	; 1
    3158:	91 05       	cpc	r25, r1
    315a:	c1 f0       	breq	.+48     	; 0x318c <LCD_moveCursor+0x56>
    315c:	2c 81       	ldd	r18, Y+4	; 0x04
    315e:	3d 81       	ldd	r19, Y+5	; 0x05
    3160:	22 30       	cpi	r18, 0x02	; 2
    3162:	31 05       	cpc	r19, r1
    3164:	2c f4       	brge	.+10     	; 0x3170 <LCD_moveCursor+0x3a>
    3166:	8c 81       	ldd	r24, Y+4	; 0x04
    3168:	9d 81       	ldd	r25, Y+5	; 0x05
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	61 f0       	breq	.+24     	; 0x3186 <LCD_moveCursor+0x50>
    316e:	19 c0       	rjmp	.+50     	; 0x31a2 <LCD_moveCursor+0x6c>
    3170:	2c 81       	ldd	r18, Y+4	; 0x04
    3172:	3d 81       	ldd	r19, Y+5	; 0x05
    3174:	22 30       	cpi	r18, 0x02	; 2
    3176:	31 05       	cpc	r19, r1
    3178:	69 f0       	breq	.+26     	; 0x3194 <LCD_moveCursor+0x5e>
    317a:	8c 81       	ldd	r24, Y+4	; 0x04
    317c:	9d 81       	ldd	r25, Y+5	; 0x05
    317e:	83 30       	cpi	r24, 0x03	; 3
    3180:	91 05       	cpc	r25, r1
    3182:	61 f0       	breq	.+24     	; 0x319c <LCD_moveCursor+0x66>
    3184:	0e c0       	rjmp	.+28     	; 0x31a2 <LCD_moveCursor+0x6c>
    {
    case 0:
      lcd_memory_address = col;
    3186:	8b 81       	ldd	r24, Y+3	; 0x03
    3188:	89 83       	std	Y+1, r24	; 0x01
    318a:	0b c0       	rjmp	.+22     	; 0x31a2 <LCD_moveCursor+0x6c>
      break;
    case 1:
      lcd_memory_address = col + 0x40;
    318c:	8b 81       	ldd	r24, Y+3	; 0x03
    318e:	80 5c       	subi	r24, 0xC0	; 192
    3190:	89 83       	std	Y+1, r24	; 0x01
    3192:	07 c0       	rjmp	.+14     	; 0x31a2 <LCD_moveCursor+0x6c>
      break;
    case 2:
      lcd_memory_address = col + 0x10;
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	80 5f       	subi	r24, 0xF0	; 240
    3198:	89 83       	std	Y+1, r24	; 0x01
    319a:	03 c0       	rjmp	.+6      	; 0x31a2 <LCD_moveCursor+0x6c>
      break;
    case 3:
      lcd_memory_address = col + 0x50;
    319c:	8b 81       	ldd	r24, Y+3	; 0x03
    319e:	80 5b       	subi	r24, 0xB0	; 176
    31a0:	89 83       	std	Y+1, r24	; 0x01
      break;
    }
  /* Move the LCD cursor to this specific address */
  LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	80 68       	ori	r24, 0x80	; 128
    31a6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <LCD_sendCommand>
}
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	0f 90       	pop	r0
    31b4:	cf 91       	pop	r28
    31b6:	df 91       	pop	r29
    31b8:	08 95       	ret

000031ba <LCD_displayStringRowColumn>:
 * @param row: The row index (0 or 1).
 * @param col: The column index (0 to 15).
 * @param Str: Pointer to the string to be displayed.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    31ba:	df 93       	push	r29
    31bc:	cf 93       	push	r28
    31be:	00 d0       	rcall	.+0      	; 0x31c0 <LCD_displayStringRowColumn+0x6>
    31c0:	00 d0       	rcall	.+0      	; 0x31c2 <LCD_displayStringRowColumn+0x8>
    31c2:	cd b7       	in	r28, 0x3d	; 61
    31c4:	de b7       	in	r29, 0x3e	; 62
    31c6:	89 83       	std	Y+1, r24	; 0x01
    31c8:	6a 83       	std	Y+2, r22	; 0x02
    31ca:	5c 83       	std	Y+4, r21	; 0x04
    31cc:	4b 83       	std	Y+3, r20	; 0x03
  LCD_moveCursor(row, col); /* go to to the required LCD position */
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	6a 81       	ldd	r22, Y+2	; 0x02
    31d2:	0e 94 9b 18 	call	0x3136	; 0x3136 <LCD_moveCursor>
  LCD_displayString(Str); /* display the string */
    31d6:	8b 81       	ldd	r24, Y+3	; 0x03
    31d8:	9c 81       	ldd	r25, Y+4	; 0x04
    31da:	0e 94 72 18 	call	0x30e4	; 0x30e4 <LCD_displayString>
}
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	08 95       	ret

000031ec <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    31ec:	df 93       	push	r29
    31ee:	cf 93       	push	r28
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
  LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <LCD_sendCommand>
}
    31fa:	cf 91       	pop	r28
    31fc:	df 91       	pop	r29
    31fe:	08 95       	ret

00003200 <LCD_cursorBlink>:

/*
 * Description: Sends the cursor blink command to the LCD.
 */
void LCD_cursorBlink(void)
{
    3200:	df 93       	push	r29
    3202:	cf 93       	push	r28
    3204:	cd b7       	in	r28, 0x3d	; 61
    3206:	de b7       	in	r29, 0x3e	; 62
  LCD_sendCommand(LCD_CURSOR_BLINK);
    3208:	8d e0       	ldi	r24, 0x0D	; 13
    320a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <LCD_sendCommand>
}
    320e:	cf 91       	pop	r28
    3210:	df 91       	pop	r29
    3212:	08 95       	ret

00003214 <LCD_displayNumber>:
 * Description: Displays a decimal value on the LCD.
 *
 * @param data: The integer value to be displayed.
 */
void LCD_displayNumber(sint32 num)
{
    3214:	df 93       	push	r29
    3216:	cf 93       	push	r28
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	68 97       	sbiw	r28, 0x18	; 24
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	de bf       	out	0x3e, r29	; 62
    3224:	0f be       	out	0x3f, r0	; 63
    3226:	cd bf       	out	0x3d, r28	; 61
    3228:	6d 8b       	std	Y+21, r22	; 0x15
    322a:	7e 8b       	std	Y+22, r23	; 0x16
    322c:	8f 8b       	std	Y+23, r24	; 0x17
    322e:	98 8f       	std	Y+24, r25	; 0x18
  /* Convert the number to a string and display it */
  char buffer[20]; /* Buffer to hold the converted number */
  ltoa(num, buffer, 10); /* Convert number to string in base 10 */
    3230:	8d 89       	ldd	r24, Y+21	; 0x15
    3232:	9e 89       	ldd	r25, Y+22	; 0x16
    3234:	af 89       	ldd	r26, Y+23	; 0x17
    3236:	b8 8d       	ldd	r27, Y+24	; 0x18
    3238:	bc 01       	movw	r22, r24
    323a:	cd 01       	movw	r24, r26
    323c:	9e 01       	movw	r18, r28
    323e:	2f 5f       	subi	r18, 0xFF	; 255
    3240:	3f 4f       	sbci	r19, 0xFF	; 255
    3242:	a9 01       	movw	r20, r18
    3244:	2a e0       	ldi	r18, 0x0A	; 10
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <ltoa>
  LCD_displayString(buffer); /* Display the string representation of the number */
    324c:	ce 01       	movw	r24, r28
    324e:	01 96       	adiw	r24, 0x01	; 1
    3250:	0e 94 72 18 	call	0x30e4	; 0x30e4 <LCD_displayString>
}
    3254:	68 96       	adiw	r28, 0x18	; 24
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	cf 91       	pop	r28
    3262:	df 91       	pop	r29
    3264:	08 95       	ret

00003266 <BUZZER_init>:
 * This function sets up the GPIO pin direction for the buzzer, allowing it to
 * operate as an output pin.
 *
 * @param buzzer Pointer to a structure of type `BUZZER_t` that holds the configuration settings for the Buzzer.
 */
void BUZZER_init(BUZZER_t *buzzer) {
    3266:	df 93       	push	r29
    3268:	cf 93       	push	r28
    326a:	00 d0       	rcall	.+0      	; 0x326c <BUZZER_init+0x6>
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	9a 83       	std	Y+2, r25	; 0x02
    3272:	89 83       	std	Y+1, r24	; 0x01
  // Set the pin direction for the buzzer to output
  GPIO_setupPinDirection(buzzer->port, buzzer->pin, PIN_OUTPUT);
    3274:	e9 81       	ldd	r30, Y+1	; 0x01
    3276:	fa 81       	ldd	r31, Y+2	; 0x02
    3278:	80 81       	ld	r24, Z
    327a:	83 70       	andi	r24, 0x03	; 3
    327c:	28 2f       	mov	r18, r24
    327e:	e9 81       	ldd	r30, Y+1	; 0x01
    3280:	fa 81       	ldd	r31, Y+2	; 0x02
    3282:	80 81       	ld	r24, Z
    3284:	86 95       	lsr	r24
    3286:	86 95       	lsr	r24
    3288:	87 70       	andi	r24, 0x07	; 7
    328a:	98 2f       	mov	r25, r24
    328c:	82 2f       	mov	r24, r18
    328e:	69 2f       	mov	r22, r25
    3290:	41 e0       	ldi	r20, 0x01	; 1
    3292:	0e 94 4f 09 	call	0x129e	; 0x129e <GPIO_setupPinDirection>
}
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <BUZZER_turnOn>:
 * This function activates the buzzer by writing the appropriate logic level
 * to the configured pin based on the buzzer's logic configuration.
 *
 * @param buzzer Pointer to the buzzer configuration structure.
 */
void BUZZER_turnOn(BUZZER_t *buzzer) {
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <BUZZER_turnOn+0x6>
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
    32aa:	9a 83       	std	Y+2, r25	; 0x02
    32ac:	89 83       	std	Y+1, r24	; 0x01
  // Write high logic to the buzzer pin based on its logic configuration
  GPIO_writePin(buzzer->port, buzzer->pin, LOGIC_HIGH ^ buzzer->buzzerLogic);
    32ae:	e9 81       	ldd	r30, Y+1	; 0x01
    32b0:	fa 81       	ldd	r31, Y+2	; 0x02
    32b2:	80 81       	ld	r24, Z
    32b4:	83 70       	andi	r24, 0x03	; 3
    32b6:	38 2f       	mov	r19, r24
    32b8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ba:	fa 81       	ldd	r31, Y+2	; 0x02
    32bc:	80 81       	ld	r24, Z
    32be:	86 95       	lsr	r24
    32c0:	86 95       	lsr	r24
    32c2:	87 70       	andi	r24, 0x07	; 7
    32c4:	28 2f       	mov	r18, r24
    32c6:	e9 81       	ldd	r30, Y+1	; 0x01
    32c8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ca:	80 81       	ld	r24, Z
    32cc:	82 95       	swap	r24
    32ce:	86 95       	lsr	r24
    32d0:	87 70       	andi	r24, 0x07	; 7
    32d2:	81 70       	andi	r24, 0x01	; 1
    32d4:	91 e0       	ldi	r25, 0x01	; 1
    32d6:	89 27       	eor	r24, r25
    32d8:	81 70       	andi	r24, 0x01	; 1
    32da:	98 2f       	mov	r25, r24
    32dc:	83 2f       	mov	r24, r19
    32de:	62 2f       	mov	r22, r18
    32e0:	49 2f       	mov	r20, r25
    32e2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
}
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	08 95       	ret

000032f0 <BUZZER_turnOff>:
 * This function deactivates the buzzer by writing a low logic level
 * to the configured pin based on the buzzer's logic configuration.
 *
 * @param buzzer Pointer to the buzzer configuration structure.
 */
void BUZZER_turnOff(BUZZER_t *buzzer) {
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	00 d0       	rcall	.+0      	; 0x32f6 <BUZZER_turnOff+0x6>
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
    32fa:	9a 83       	std	Y+2, r25	; 0x02
    32fc:	89 83       	std	Y+1, r24	; 0x01
  // Write low logic to the buzzer pin based on its logic configuration
  GPIO_writePin(buzzer->port, buzzer->pin, LOGIC_LOW ^ buzzer->buzzerLogic);
    32fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3300:	fa 81       	ldd	r31, Y+2	; 0x02
    3302:	80 81       	ld	r24, Z
    3304:	83 70       	andi	r24, 0x03	; 3
    3306:	38 2f       	mov	r19, r24
    3308:	e9 81       	ldd	r30, Y+1	; 0x01
    330a:	fa 81       	ldd	r31, Y+2	; 0x02
    330c:	80 81       	ld	r24, Z
    330e:	86 95       	lsr	r24
    3310:	86 95       	lsr	r24
    3312:	87 70       	andi	r24, 0x07	; 7
    3314:	28 2f       	mov	r18, r24
    3316:	e9 81       	ldd	r30, Y+1	; 0x01
    3318:	fa 81       	ldd	r31, Y+2	; 0x02
    331a:	80 81       	ld	r24, Z
    331c:	82 95       	swap	r24
    331e:	86 95       	lsr	r24
    3320:	87 70       	andi	r24, 0x07	; 7
    3322:	81 70       	andi	r24, 0x01	; 1
    3324:	98 2f       	mov	r25, r24
    3326:	83 2f       	mov	r24, r19
    3328:	62 2f       	mov	r22, r18
    332a:	49 2f       	mov	r20, r25
    332c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_writePin>
}
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	cf 91       	pop	r28
    3336:	df 91       	pop	r29
    3338:	08 95       	ret

0000333a <BUZZER_toggle>:
 * This function switches the buzzer between on and off states by toggling
 * the logic level on the configured pin.
 *
 * @param buzzer Pointer to the buzzer configuration structure.
 */
void BUZZER_toggle(BUZZER_t *buzzer) {
    333a:	df 93       	push	r29
    333c:	cf 93       	push	r28
    333e:	00 d0       	rcall	.+0      	; 0x3340 <BUZZER_toggle+0x6>
    3340:	cd b7       	in	r28, 0x3d	; 61
    3342:	de b7       	in	r29, 0x3e	; 62
    3344:	9a 83       	std	Y+2, r25	; 0x02
    3346:	89 83       	std	Y+1, r24	; 0x01
  // Toggle the current state of the buzzer pin
  GPIO_togglePin(buzzer->port, buzzer->pin);
    3348:	e9 81       	ldd	r30, Y+1	; 0x01
    334a:	fa 81       	ldd	r31, Y+2	; 0x02
    334c:	80 81       	ld	r24, Z
    334e:	83 70       	andi	r24, 0x03	; 3
    3350:	28 2f       	mov	r18, r24
    3352:	e9 81       	ldd	r30, Y+1	; 0x01
    3354:	fa 81       	ldd	r31, Y+2	; 0x02
    3356:	80 81       	ld	r24, Z
    3358:	86 95       	lsr	r24
    335a:	86 95       	lsr	r24
    335c:	87 70       	andi	r24, 0x07	; 7
    335e:	98 2f       	mov	r25, r24
    3360:	82 2f       	mov	r24, r18
    3362:	69 2f       	mov	r22, r25
    3364:	0e 94 25 0b 	call	0x164a	; 0x164a <GPIO_togglePin>
}
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	cf 91       	pop	r28
    336e:	df 91       	pop	r29
    3370:	08 95       	ret

00003372 <main>:
static inline void DisplayDistance(void);
static inline void TriggerStopWarning(void);
static inline void AdjustLEDs(void);


int main(void) {
    3372:	df 93       	push	r29
    3374:	cf 93       	push	r28
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
  /* Initialize all peripherals: ultrasonic sensor, buzzer, LCD, and LEDs */
  ULTRA_init();
    337a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <ULTRA_init>
  BUZZER_init(&g_buzzer1);
    337e:	8a ea       	ldi	r24, 0xAA	; 170
    3380:	91 e0       	ldi	r25, 0x01	; 1
    3382:	0e 94 33 19 	call	0x3266	; 0x3266 <BUZZER_init>
  LCD_init();
    3386:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <LCD_init>
  LED_init(&g_ledRed);
    338a:	87 ea       	ldi	r24, 0xA7	; 167
    338c:	91 e0       	ldi	r25, 0x01	; 1
    338e:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LED_init>
  LED_init(&g_ledGreen);
    3392:	88 ea       	ldi	r24, 0xA8	; 168
    3394:	91 e0       	ldi	r25, 0x01	; 1
    3396:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LED_init>
  LED_init(&g_ledBlue);
    339a:	89 ea       	ldi	r24, 0xA9	; 169
    339c:	91 e0       	ldi	r25, 0x01	; 1
    339e:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LED_init>

  /* Activate global interrupts */
  __asm__("SEI");
    33a2:	78 94       	sei

  /* Begin ultrasonic distance measurement */
  ULTRA_start();
    33a4:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <ULTRA_start>

  /* Wait until the first distance reading becomes available */
  while (g_ultra_distance_ready == 0)
    33a8:	80 91 b6 01 	lds	r24, 0x01B6
    33ac:	88 23       	and	r24, r24
    33ae:	e1 f3       	breq	.-8      	; 0x33a8 <main+0x36>
    ;

  /* Show the initial distance label on the LCD */
  LCD_displayString("Distance =   cm");
    33b0:	80 e6       	ldi	r24, 0x60	; 96
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	0e 94 72 18 	call	0x30e4	; 0x30e4 <LCD_displayString>

  for (;;) { /* Continuous loop */
    /* Verify if a new distance reading is available */
    if (TRUE == g_ultra_distance_ready) {
    33b8:	80 91 b6 01 	lds	r24, 0x01B6
    33bc:	81 30       	cpi	r24, 0x01	; 1
    33be:	31 f4       	brne	.+12     	; 0x33cc <main+0x5a>
      /* Clear the distance ready flag and update the display */
      g_ultra_distance_ready = FALSE;
    33c0:	10 92 b6 01 	sts	0x01B6, r1
      DisplayDistance();
    33c4:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <DisplayDistance>
      /* Restart the ultrasonic sensor */
      ULTRA_start();
    33c8:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <ULTRA_start>
    }

    /* If an object is detected within 5 cm, activate the stop alert */
    if (5 >= g_ultra_distanceCm) {
    33cc:	80 91 b4 01 	lds	r24, 0x01B4
    33d0:	90 91 b5 01 	lds	r25, 0x01B5
    33d4:	86 30       	cpi	r24, 0x06	; 6
    33d6:	91 05       	cpc	r25, r1
    33d8:	18 f4       	brcc	.+6      	; 0x33e0 <main+0x6e>
      TriggerStopWarning();
    33da:	0e 94 12 1a 	call	0x3424	; 0x3424 <TriggerStopWarning>
    33de:	ec cf       	rjmp	.-40     	; 0x33b8 <main+0x46>
    }
    else {
      /* Clear the stop alert from the LCD */
      LCD_moveCursor(1, 0);
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	60 e0       	ldi	r22, 0x00	; 0
    33e4:	0e 94 9b 18 	call	0x3136	; 0x3136 <LCD_moveCursor>
      LCD_displayString("                         ");
    33e8:	80 e7       	ldi	r24, 0x70	; 112
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	0e 94 72 18 	call	0x30e4	; 0x30e4 <LCD_displayString>

      /* Update LED status based on the measured distance */
      AdjustLEDs();
    33f0:	0e 94 31 1b 	call	0x3662	; 0x3662 <AdjustLEDs>
    33f4:	e1 cf       	rjmp	.-62     	; 0x33b8 <main+0x46>

000033f6 <DisplayDistance>:
    }
  }
}

static inline void DisplayDistance(void) {
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
  /* Move cursor to the position for distance and display the value */
  LCD_moveCursor(0, 10);
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	6a e0       	ldi	r22, 0x0A	; 10
    3402:	0e 94 9b 18 	call	0x3136	; 0x3136 <LCD_moveCursor>
  LCD_displayNumber(ULTRA_readDistance());
    3406:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <ULTRA_readDistance>
    340a:	cc 01       	movw	r24, r24
    340c:	a0 e0       	ldi	r26, 0x00	; 0
    340e:	b0 e0       	ldi	r27, 0x00	; 0
    3410:	bc 01       	movw	r22, r24
    3412:	cd 01       	movw	r24, r26
    3414:	0e 94 0a 19 	call	0x3214	; 0x3214 <LCD_displayNumber>
  LCD_displayCharacter(' ');
    3418:	80 e2       	ldi	r24, 0x20	; 32
    341a:	0e 94 20 14 	call	0x2840	; 0x2840 <LCD_displayCharacter>
}
    341e:	cf 91       	pop	r28
    3420:	df 91       	pop	r29
    3422:	08 95       	ret

00003424 <TriggerStopWarning>:

static inline void TriggerStopWarning(void) {
    3424:	df 93       	push	r29
    3426:	cf 93       	push	r28
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	6c 97       	sbiw	r28, 0x1c	; 28
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	f8 94       	cli
    3432:	de bf       	out	0x3e, r29	; 62
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	cd bf       	out	0x3d, r28	; 61
  /* Display a stop message, activate the buzzer, and turn on all LEDs */
  LCD_moveCursor(1, 0);
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	60 e0       	ldi	r22, 0x00	; 0
    343c:	0e 94 9b 18 	call	0x3136	; 0x3136 <LCD_moveCursor>
  LCD_displayString("      STOP!!      ");
    3440:	8a e8       	ldi	r24, 0x8A	; 138
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	0e 94 72 18 	call	0x30e4	; 0x30e4 <LCD_displayString>
  BUZZER_turnOn(&g_buzzer1);
    3448:	8a ea       	ldi	r24, 0xAA	; 170
    344a:	91 e0       	ldi	r25, 0x01	; 1
    344c:	0e 94 50 19 	call	0x32a0	; 0x32a0 <BUZZER_turnOn>
  LED_turnOn(&g_ledRed);
    3450:	87 ea       	ldi	r24, 0xA7	; 167
    3452:	91 e0       	ldi	r25, 0x01	; 1
    3454:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LED_turnOn>
  LED_turnOn(&g_ledGreen);
    3458:	88 ea       	ldi	r24, 0xA8	; 168
    345a:	91 e0       	ldi	r25, 0x01	; 1
    345c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LED_turnOn>
  LED_turnOn(&g_ledBlue);
    3460:	89 ea       	ldi	r24, 0xA9	; 169
    3462:	91 e0       	ldi	r25, 0x01	; 1
    3464:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LED_turnOn>
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	aa e7       	ldi	r26, 0x7A	; 122
    346e:	b3 e4       	ldi	r27, 0x43	; 67
    3470:	89 8f       	std	Y+25, r24	; 0x19
    3472:	9a 8f       	std	Y+26, r25	; 0x1a
    3474:	ab 8f       	std	Y+27, r26	; 0x1b
    3476:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3478:	69 8d       	ldd	r22, Y+25	; 0x19
    347a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    347c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    347e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	4a e7       	ldi	r20, 0x7A	; 122
    3486:	55 e4       	ldi	r21, 0x45	; 69
    3488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	8d 8b       	std	Y+21, r24	; 0x15
    3492:	9e 8b       	std	Y+22, r25	; 0x16
    3494:	af 8b       	std	Y+23, r26	; 0x17
    3496:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3498:	6d 89       	ldd	r22, Y+21	; 0x15
    349a:	7e 89       	ldd	r23, Y+22	; 0x16
    349c:	8f 89       	ldd	r24, Y+23	; 0x17
    349e:	98 8d       	ldd	r25, Y+24	; 0x18
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	40 e8       	ldi	r20, 0x80	; 128
    34a6:	5f e3       	ldi	r21, 0x3F	; 63
    34a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ac:	88 23       	and	r24, r24
    34ae:	2c f4       	brge	.+10     	; 0x34ba <TriggerStopWarning+0x96>
		__ticks = 1;
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	9c 8b       	std	Y+20, r25	; 0x14
    34b6:	8b 8b       	std	Y+19, r24	; 0x13
    34b8:	3f c0       	rjmp	.+126    	; 0x3538 <TriggerStopWarning+0x114>
	else if (__tmp > 65535)
    34ba:	6d 89       	ldd	r22, Y+21	; 0x15
    34bc:	7e 89       	ldd	r23, Y+22	; 0x16
    34be:	8f 89       	ldd	r24, Y+23	; 0x17
    34c0:	98 8d       	ldd	r25, Y+24	; 0x18
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	3f ef       	ldi	r19, 0xFF	; 255
    34c6:	4f e7       	ldi	r20, 0x7F	; 127
    34c8:	57 e4       	ldi	r21, 0x47	; 71
    34ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ce:	18 16       	cp	r1, r24
    34d0:	4c f5       	brge	.+82     	; 0x3524 <TriggerStopWarning+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d2:	69 8d       	ldd	r22, Y+25	; 0x19
    34d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	40 e2       	ldi	r20, 0x20	; 32
    34e0:	51 e4       	ldi	r21, 0x41	; 65
    34e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	bc 01       	movw	r22, r24
    34ec:	cd 01       	movw	r24, r26
    34ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f2:	dc 01       	movw	r26, r24
    34f4:	cb 01       	movw	r24, r22
    34f6:	9c 8b       	std	Y+20, r25	; 0x14
    34f8:	8b 8b       	std	Y+19, r24	; 0x13
    34fa:	0f c0       	rjmp	.+30     	; 0x351a <TriggerStopWarning+0xf6>
    34fc:	80 e9       	ldi	r24, 0x90	; 144
    34fe:	91 e0       	ldi	r25, 0x01	; 1
    3500:	9a 8b       	std	Y+18, r25	; 0x12
    3502:	89 8b       	std	Y+17, r24	; 0x11
    3504:	89 89       	ldd	r24, Y+17	; 0x11
    3506:	9a 89       	ldd	r25, Y+18	; 0x12
    3508:	01 97       	sbiw	r24, 0x01	; 1
    350a:	f1 f7       	brne	.-4      	; 0x3508 <TriggerStopWarning+0xe4>
    350c:	9a 8b       	std	Y+18, r25	; 0x12
    350e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3510:	8b 89       	ldd	r24, Y+19	; 0x13
    3512:	9c 89       	ldd	r25, Y+20	; 0x14
    3514:	01 97       	sbiw	r24, 0x01	; 1
    3516:	9c 8b       	std	Y+20, r25	; 0x14
    3518:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    351a:	8b 89       	ldd	r24, Y+19	; 0x13
    351c:	9c 89       	ldd	r25, Y+20	; 0x14
    351e:	00 97       	sbiw	r24, 0x00	; 0
    3520:	69 f7       	brne	.-38     	; 0x34fc <TriggerStopWarning+0xd8>
    3522:	14 c0       	rjmp	.+40     	; 0x354c <TriggerStopWarning+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3524:	6d 89       	ldd	r22, Y+21	; 0x15
    3526:	7e 89       	ldd	r23, Y+22	; 0x16
    3528:	8f 89       	ldd	r24, Y+23	; 0x17
    352a:	98 8d       	ldd	r25, Y+24	; 0x18
    352c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	9c 8b       	std	Y+20, r25	; 0x14
    3536:	8b 8b       	std	Y+19, r24	; 0x13
    3538:	8b 89       	ldd	r24, Y+19	; 0x13
    353a:	9c 89       	ldd	r25, Y+20	; 0x14
    353c:	98 8b       	std	Y+16, r25	; 0x10
    353e:	8f 87       	std	Y+15, r24	; 0x0f
    3540:	8f 85       	ldd	r24, Y+15	; 0x0f
    3542:	98 89       	ldd	r25, Y+16	; 0x10
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	f1 f7       	brne	.-4      	; 0x3544 <TriggerStopWarning+0x120>
    3548:	98 8b       	std	Y+16, r25	; 0x10
    354a:	8f 87       	std	Y+15, r24	; 0x0f

  /* Wait briefly, then deactivate buzzer and LEDs */
  _delay_ms(250);
  BUZZER_turnOff(&g_buzzer1);
    354c:	8a ea       	ldi	r24, 0xAA	; 170
    354e:	91 e0       	ldi	r25, 0x01	; 1
    3550:	0e 94 78 19 	call	0x32f0	; 0x32f0 <BUZZER_turnOff>
  LED_turnOff(&g_ledRed);
    3554:	87 ea       	ldi	r24, 0xA7	; 167
    3556:	91 e0       	ldi	r25, 0x01	; 1
    3558:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LED_turnOff>
  LED_turnOff(&g_ledGreen);
    355c:	88 ea       	ldi	r24, 0xA8	; 168
    355e:	91 e0       	ldi	r25, 0x01	; 1
    3560:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LED_turnOff>
  LED_turnOff(&g_ledBlue);
    3564:	89 ea       	ldi	r24, 0xA9	; 169
    3566:	91 e0       	ldi	r25, 0x01	; 1
    3568:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LED_turnOff>
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	aa e7       	ldi	r26, 0x7A	; 122
    3572:	b3 e4       	ldi	r27, 0x43	; 67
    3574:	8b 87       	std	Y+11, r24	; 0x0b
    3576:	9c 87       	std	Y+12, r25	; 0x0c
    3578:	ad 87       	std	Y+13, r26	; 0x0d
    357a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357c:	6b 85       	ldd	r22, Y+11	; 0x0b
    357e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3580:	8d 85       	ldd	r24, Y+13	; 0x0d
    3582:	9e 85       	ldd	r25, Y+14	; 0x0e
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	4a e7       	ldi	r20, 0x7A	; 122
    358a:	55 e4       	ldi	r21, 0x45	; 69
    358c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	8f 83       	std	Y+7, r24	; 0x07
    3596:	98 87       	std	Y+8, r25	; 0x08
    3598:	a9 87       	std	Y+9, r26	; 0x09
    359a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    359c:	6f 81       	ldd	r22, Y+7	; 0x07
    359e:	78 85       	ldd	r23, Y+8	; 0x08
    35a0:	89 85       	ldd	r24, Y+9	; 0x09
    35a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	40 e8       	ldi	r20, 0x80	; 128
    35aa:	5f e3       	ldi	r21, 0x3F	; 63
    35ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35b0:	88 23       	and	r24, r24
    35b2:	2c f4       	brge	.+10     	; 0x35be <TriggerStopWarning+0x19a>
		__ticks = 1;
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	9e 83       	std	Y+6, r25	; 0x06
    35ba:	8d 83       	std	Y+5, r24	; 0x05
    35bc:	3f c0       	rjmp	.+126    	; 0x363c <TriggerStopWarning+0x218>
	else if (__tmp > 65535)
    35be:	6f 81       	ldd	r22, Y+7	; 0x07
    35c0:	78 85       	ldd	r23, Y+8	; 0x08
    35c2:	89 85       	ldd	r24, Y+9	; 0x09
    35c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	3f ef       	ldi	r19, 0xFF	; 255
    35ca:	4f e7       	ldi	r20, 0x7F	; 127
    35cc:	57 e4       	ldi	r21, 0x47	; 71
    35ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35d2:	18 16       	cp	r1, r24
    35d4:	4c f5       	brge	.+82     	; 0x3628 <TriggerStopWarning+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    35d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    35da:	8d 85       	ldd	r24, Y+13	; 0x0d
    35dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	40 e2       	ldi	r20, 0x20	; 32
    35e4:	51 e4       	ldi	r21, 0x41	; 65
    35e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	bc 01       	movw	r22, r24
    35f0:	cd 01       	movw	r24, r26
    35f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	9e 83       	std	Y+6, r25	; 0x06
    35fc:	8d 83       	std	Y+5, r24	; 0x05
    35fe:	0f c0       	rjmp	.+30     	; 0x361e <TriggerStopWarning+0x1fa>
    3600:	80 e9       	ldi	r24, 0x90	; 144
    3602:	91 e0       	ldi	r25, 0x01	; 1
    3604:	9c 83       	std	Y+4, r25	; 0x04
    3606:	8b 83       	std	Y+3, r24	; 0x03
    3608:	8b 81       	ldd	r24, Y+3	; 0x03
    360a:	9c 81       	ldd	r25, Y+4	; 0x04
    360c:	01 97       	sbiw	r24, 0x01	; 1
    360e:	f1 f7       	brne	.-4      	; 0x360c <TriggerStopWarning+0x1e8>
    3610:	9c 83       	std	Y+4, r25	; 0x04
    3612:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3614:	8d 81       	ldd	r24, Y+5	; 0x05
    3616:	9e 81       	ldd	r25, Y+6	; 0x06
    3618:	01 97       	sbiw	r24, 0x01	; 1
    361a:	9e 83       	std	Y+6, r25	; 0x06
    361c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    361e:	8d 81       	ldd	r24, Y+5	; 0x05
    3620:	9e 81       	ldd	r25, Y+6	; 0x06
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	69 f7       	brne	.-38     	; 0x3600 <TriggerStopWarning+0x1dc>
    3626:	14 c0       	rjmp	.+40     	; 0x3650 <TriggerStopWarning+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3628:	6f 81       	ldd	r22, Y+7	; 0x07
    362a:	78 85       	ldd	r23, Y+8	; 0x08
    362c:	89 85       	ldd	r24, Y+9	; 0x09
    362e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	9e 83       	std	Y+6, r25	; 0x06
    363a:	8d 83       	std	Y+5, r24	; 0x05
    363c:	8d 81       	ldd	r24, Y+5	; 0x05
    363e:	9e 81       	ldd	r25, Y+6	; 0x06
    3640:	9a 83       	std	Y+2, r25	; 0x02
    3642:	89 83       	std	Y+1, r24	; 0x01
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	9a 81       	ldd	r25, Y+2	; 0x02
    3648:	01 97       	sbiw	r24, 0x01	; 1
    364a:	f1 f7       	brne	.-4      	; 0x3648 <TriggerStopWarning+0x224>
    364c:	9a 83       	std	Y+2, r25	; 0x02
    364e:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(250);
}
    3650:	6c 96       	adiw	r28, 0x1c	; 28
    3652:	0f b6       	in	r0, 0x3f	; 63
    3654:	f8 94       	cli
    3656:	de bf       	out	0x3e, r29	; 62
    3658:	0f be       	out	0x3f, r0	; 63
    365a:	cd bf       	out	0x3d, r28	; 61
    365c:	cf 91       	pop	r28
    365e:	df 91       	pop	r29
    3660:	08 95       	ret

00003662 <AdjustLEDs>:

static inline void AdjustLEDs(void) {
    3662:	df 93       	push	r29
    3664:	cf 93       	push	r28
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
  /* Control LED behavior based on how far the object is */
  if (10 >= g_ultra_distanceCm) {
    366a:	80 91 b4 01 	lds	r24, 0x01B4
    366e:	90 91 b5 01 	lds	r25, 0x01B5
    3672:	8b 30       	cpi	r24, 0x0B	; 11
    3674:	91 05       	cpc	r25, r1
    3676:	68 f4       	brcc	.+26     	; 0x3692 <AdjustLEDs+0x30>
    LED_turnOn(&g_ledRed);
    3678:	87 ea       	ldi	r24, 0xA7	; 167
    367a:	91 e0       	ldi	r25, 0x01	; 1
    367c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LED_turnOn>
    LED_turnOn(&g_ledGreen);
    3680:	88 ea       	ldi	r24, 0xA8	; 168
    3682:	91 e0       	ldi	r25, 0x01	; 1
    3684:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LED_turnOn>
    LED_turnOn(&g_ledBlue);
    3688:	89 ea       	ldi	r24, 0xA9	; 169
    368a:	91 e0       	ldi	r25, 0x01	; 1
    368c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LED_turnOn>
    3690:	34 c0       	rjmp	.+104    	; 0x36fa <AdjustLEDs+0x98>
  }
  else if (15 >= g_ultra_distanceCm) {
    3692:	80 91 b4 01 	lds	r24, 0x01B4
    3696:	90 91 b5 01 	lds	r25, 0x01B5
    369a:	80 31       	cpi	r24, 0x10	; 16
    369c:	91 05       	cpc	r25, r1
    369e:	68 f4       	brcc	.+26     	; 0x36ba <AdjustLEDs+0x58>
    LED_turnOn(&g_ledRed);
    36a0:	87 ea       	ldi	r24, 0xA7	; 167
    36a2:	91 e0       	ldi	r25, 0x01	; 1
    36a4:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LED_turnOn>
    LED_turnOn(&g_ledGreen);
    36a8:	88 ea       	ldi	r24, 0xA8	; 168
    36aa:	91 e0       	ldi	r25, 0x01	; 1
    36ac:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LED_turnOn>
    LED_turnOff(&g_ledBlue);
    36b0:	89 ea       	ldi	r24, 0xA9	; 169
    36b2:	91 e0       	ldi	r25, 0x01	; 1
    36b4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LED_turnOff>
    36b8:	20 c0       	rjmp	.+64     	; 0x36fa <AdjustLEDs+0x98>
  }
  else if (20 >= g_ultra_distanceCm) {
    36ba:	80 91 b4 01 	lds	r24, 0x01B4
    36be:	90 91 b5 01 	lds	r25, 0x01B5
    36c2:	85 31       	cpi	r24, 0x15	; 21
    36c4:	91 05       	cpc	r25, r1
    36c6:	68 f4       	brcc	.+26     	; 0x36e2 <AdjustLEDs+0x80>
    LED_turnOn(&g_ledRed);
    36c8:	87 ea       	ldi	r24, 0xA7	; 167
    36ca:	91 e0       	ldi	r25, 0x01	; 1
    36cc:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LED_turnOn>
    LED_turnOff(&g_ledGreen);
    36d0:	88 ea       	ldi	r24, 0xA8	; 168
    36d2:	91 e0       	ldi	r25, 0x01	; 1
    36d4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LED_turnOff>
    LED_turnOff(&g_ledBlue);
    36d8:	89 ea       	ldi	r24, 0xA9	; 169
    36da:	91 e0       	ldi	r25, 0x01	; 1
    36dc:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LED_turnOff>
    36e0:	0c c0       	rjmp	.+24     	; 0x36fa <AdjustLEDs+0x98>
  }
  else {
    /* Turn off all LEDs if the object is beyond 20 cm */
    LED_turnOff(&g_ledRed);
    36e2:	87 ea       	ldi	r24, 0xA7	; 167
    36e4:	91 e0       	ldi	r25, 0x01	; 1
    36e6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LED_turnOff>
    LED_turnOff(&g_ledGreen);
    36ea:	88 ea       	ldi	r24, 0xA8	; 168
    36ec:	91 e0       	ldi	r25, 0x01	; 1
    36ee:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LED_turnOff>
    LED_turnOff(&g_ledBlue);
    36f2:	89 ea       	ldi	r24, 0xA9	; 169
    36f4:	91 e0       	ldi	r25, 0x01	; 1
    36f6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LED_turnOff>
  }
}
    36fa:	cf 91       	pop	r28
    36fc:	df 91       	pop	r29
    36fe:	08 95       	ret

00003700 <__mulsi3>:
    3700:	62 9f       	mul	r22, r18
    3702:	d0 01       	movw	r26, r0
    3704:	73 9f       	mul	r23, r19
    3706:	f0 01       	movw	r30, r0
    3708:	82 9f       	mul	r24, r18
    370a:	e0 0d       	add	r30, r0
    370c:	f1 1d       	adc	r31, r1
    370e:	64 9f       	mul	r22, r20
    3710:	e0 0d       	add	r30, r0
    3712:	f1 1d       	adc	r31, r1
    3714:	92 9f       	mul	r25, r18
    3716:	f0 0d       	add	r31, r0
    3718:	83 9f       	mul	r24, r19
    371a:	f0 0d       	add	r31, r0
    371c:	74 9f       	mul	r23, r20
    371e:	f0 0d       	add	r31, r0
    3720:	65 9f       	mul	r22, r21
    3722:	f0 0d       	add	r31, r0
    3724:	99 27       	eor	r25, r25
    3726:	72 9f       	mul	r23, r18
    3728:	b0 0d       	add	r27, r0
    372a:	e1 1d       	adc	r30, r1
    372c:	f9 1f       	adc	r31, r25
    372e:	63 9f       	mul	r22, r19
    3730:	b0 0d       	add	r27, r0
    3732:	e1 1d       	adc	r30, r1
    3734:	f9 1f       	adc	r31, r25
    3736:	bd 01       	movw	r22, r26
    3738:	cf 01       	movw	r24, r30
    373a:	11 24       	eor	r1, r1
    373c:	08 95       	ret

0000373e <__udivmodsi4>:
    373e:	a1 e2       	ldi	r26, 0x21	; 33
    3740:	1a 2e       	mov	r1, r26
    3742:	aa 1b       	sub	r26, r26
    3744:	bb 1b       	sub	r27, r27
    3746:	fd 01       	movw	r30, r26
    3748:	0d c0       	rjmp	.+26     	; 0x3764 <__udivmodsi4_ep>

0000374a <__udivmodsi4_loop>:
    374a:	aa 1f       	adc	r26, r26
    374c:	bb 1f       	adc	r27, r27
    374e:	ee 1f       	adc	r30, r30
    3750:	ff 1f       	adc	r31, r31
    3752:	a2 17       	cp	r26, r18
    3754:	b3 07       	cpc	r27, r19
    3756:	e4 07       	cpc	r30, r20
    3758:	f5 07       	cpc	r31, r21
    375a:	20 f0       	brcs	.+8      	; 0x3764 <__udivmodsi4_ep>
    375c:	a2 1b       	sub	r26, r18
    375e:	b3 0b       	sbc	r27, r19
    3760:	e4 0b       	sbc	r30, r20
    3762:	f5 0b       	sbc	r31, r21

00003764 <__udivmodsi4_ep>:
    3764:	66 1f       	adc	r22, r22
    3766:	77 1f       	adc	r23, r23
    3768:	88 1f       	adc	r24, r24
    376a:	99 1f       	adc	r25, r25
    376c:	1a 94       	dec	r1
    376e:	69 f7       	brne	.-38     	; 0x374a <__udivmodsi4_loop>
    3770:	60 95       	com	r22
    3772:	70 95       	com	r23
    3774:	80 95       	com	r24
    3776:	90 95       	com	r25
    3778:	9b 01       	movw	r18, r22
    377a:	ac 01       	movw	r20, r24
    377c:	bd 01       	movw	r22, r26
    377e:	cf 01       	movw	r24, r30
    3780:	08 95       	ret

00003782 <__prologue_saves__>:
    3782:	2f 92       	push	r2
    3784:	3f 92       	push	r3
    3786:	4f 92       	push	r4
    3788:	5f 92       	push	r5
    378a:	6f 92       	push	r6
    378c:	7f 92       	push	r7
    378e:	8f 92       	push	r8
    3790:	9f 92       	push	r9
    3792:	af 92       	push	r10
    3794:	bf 92       	push	r11
    3796:	cf 92       	push	r12
    3798:	df 92       	push	r13
    379a:	ef 92       	push	r14
    379c:	ff 92       	push	r15
    379e:	0f 93       	push	r16
    37a0:	1f 93       	push	r17
    37a2:	cf 93       	push	r28
    37a4:	df 93       	push	r29
    37a6:	cd b7       	in	r28, 0x3d	; 61
    37a8:	de b7       	in	r29, 0x3e	; 62
    37aa:	ca 1b       	sub	r28, r26
    37ac:	db 0b       	sbc	r29, r27
    37ae:	0f b6       	in	r0, 0x3f	; 63
    37b0:	f8 94       	cli
    37b2:	de bf       	out	0x3e, r29	; 62
    37b4:	0f be       	out	0x3f, r0	; 63
    37b6:	cd bf       	out	0x3d, r28	; 61
    37b8:	09 94       	ijmp

000037ba <__epilogue_restores__>:
    37ba:	2a 88       	ldd	r2, Y+18	; 0x12
    37bc:	39 88       	ldd	r3, Y+17	; 0x11
    37be:	48 88       	ldd	r4, Y+16	; 0x10
    37c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    37c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    37c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    37c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    37c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    37ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    37cc:	b9 84       	ldd	r11, Y+9	; 0x09
    37ce:	c8 84       	ldd	r12, Y+8	; 0x08
    37d0:	df 80       	ldd	r13, Y+7	; 0x07
    37d2:	ee 80       	ldd	r14, Y+6	; 0x06
    37d4:	fd 80       	ldd	r15, Y+5	; 0x05
    37d6:	0c 81       	ldd	r16, Y+4	; 0x04
    37d8:	1b 81       	ldd	r17, Y+3	; 0x03
    37da:	aa 81       	ldd	r26, Y+2	; 0x02
    37dc:	b9 81       	ldd	r27, Y+1	; 0x01
    37de:	ce 0f       	add	r28, r30
    37e0:	d1 1d       	adc	r29, r1
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	f8 94       	cli
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	cd bf       	out	0x3d, r28	; 61
    37ec:	ed 01       	movw	r28, r26
    37ee:	08 95       	ret

000037f0 <ltoa>:
    37f0:	fa 01       	movw	r30, r20
    37f2:	cf 93       	push	r28
    37f4:	ff 93       	push	r31
    37f6:	ef 93       	push	r30
    37f8:	22 30       	cpi	r18, 0x02	; 2
    37fa:	44 f1       	brlt	.+80     	; 0x384c <ltoa+0x5c>
    37fc:	25 32       	cpi	r18, 0x25	; 37
    37fe:	34 f5       	brge	.+76     	; 0x384c <ltoa+0x5c>
    3800:	c2 2f       	mov	r28, r18
    3802:	e8 94       	clt
    3804:	ca 30       	cpi	r28, 0x0A	; 10
    3806:	49 f4       	brne	.+18     	; 0x381a <ltoa+0x2a>
    3808:	97 fb       	bst	r25, 7
    380a:	3e f4       	brtc	.+14     	; 0x381a <ltoa+0x2a>
    380c:	90 95       	com	r25
    380e:	80 95       	com	r24
    3810:	70 95       	com	r23
    3812:	61 95       	neg	r22
    3814:	7f 4f       	sbci	r23, 0xFF	; 255
    3816:	8f 4f       	sbci	r24, 0xFF	; 255
    3818:	9f 4f       	sbci	r25, 0xFF	; 255
    381a:	2c 2f       	mov	r18, r28
    381c:	33 27       	eor	r19, r19
    381e:	44 27       	eor	r20, r20
    3820:	55 27       	eor	r21, r21
    3822:	ff 93       	push	r31
    3824:	ef 93       	push	r30
    3826:	0e 94 9f 1b 	call	0x373e	; 0x373e <__udivmodsi4>
    382a:	ef 91       	pop	r30
    382c:	ff 91       	pop	r31
    382e:	60 5d       	subi	r22, 0xD0	; 208
    3830:	6a 33       	cpi	r22, 0x3A	; 58
    3832:	0c f0       	brlt	.+2      	; 0x3836 <ltoa+0x46>
    3834:	69 5d       	subi	r22, 0xD9	; 217
    3836:	61 93       	st	Z+, r22
    3838:	b9 01       	movw	r22, r18
    383a:	ca 01       	movw	r24, r20
    383c:	60 50       	subi	r22, 0x00	; 0
    383e:	70 40       	sbci	r23, 0x00	; 0
    3840:	80 40       	sbci	r24, 0x00	; 0
    3842:	90 40       	sbci	r25, 0x00	; 0
    3844:	51 f7       	brne	.-44     	; 0x381a <ltoa+0x2a>
    3846:	16 f4       	brtc	.+4      	; 0x384c <ltoa+0x5c>
    3848:	cd e2       	ldi	r28, 0x2D	; 45
    384a:	c1 93       	st	Z+, r28
    384c:	10 82       	st	Z, r1
    384e:	8f 91       	pop	r24
    3850:	9f 91       	pop	r25
    3852:	cf 91       	pop	r28
    3854:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <strrev>

00003858 <strrev>:
    3858:	dc 01       	movw	r26, r24
    385a:	fc 01       	movw	r30, r24
    385c:	67 2f       	mov	r22, r23
    385e:	71 91       	ld	r23, Z+
    3860:	77 23       	and	r23, r23
    3862:	e1 f7       	brne	.-8      	; 0x385c <strrev+0x4>
    3864:	32 97       	sbiw	r30, 0x02	; 2
    3866:	04 c0       	rjmp	.+8      	; 0x3870 <strrev+0x18>
    3868:	7c 91       	ld	r23, X
    386a:	6d 93       	st	X+, r22
    386c:	70 83       	st	Z, r23
    386e:	62 91       	ld	r22, -Z
    3870:	ae 17       	cp	r26, r30
    3872:	bf 07       	cpc	r27, r31
    3874:	c8 f3       	brcs	.-14     	; 0x3868 <strrev+0x10>
    3876:	08 95       	ret

00003878 <_exit>:
    3878:	f8 94       	cli

0000387a <__stop_program>:
    387a:	ff cf       	rjmp	.-2      	; 0x387a <__stop_program>
